const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const generationConfig2 = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const courseOutlineAIModel = model.startChat({
        generationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "Generate a study material for\npython for exam and level of difficulty\nwill be easy with summary of course,course Title,\n1 List of Chapters along with summary,chapter emoji\nfor each chapter, Topic list in each,All chapter in\nJSON format"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "Okay, here's a JSON formatted study material for a beginner-level Python exam, designed to be easy and with the requested components:\n\n```json\n{\n  \"courseTitle\": \"Python Fundamentals for Beginners\",\n  \"courseSummary\": \"This course provides a gentle introduction to the Python programming language. It covers basic syntax, data types, control flow, and simple functions, equipping you with the foundational knowledge to write basic Python programs.  It aims to build a solid understanding before moving onto more advanced topics.\",\n  \"levelOfDifficulty\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Introduction to Python\",\n      \"chapterEmoji\": \"👋\",\n      \"summary\": \"This chapter introduces the Python language, its history, why it's popular, and how to set up your development environment. You will also write and run your first basic Python code.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why Python?\",\n        \"Setting up Python Environment\",\n        \"Running your first Python program (Hello World)\",\n          \"Basic Syntax (comments)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterTitle\": \"Data Types and Variables\",\n       \"chapterEmoji\": \"🧮\",\n      \"summary\": \"This chapter explains the core data types in Python (integers, floats, strings, and booleans) and how to declare and use variables to store them. It introduces the concept of operators\",\n      \"topics\": [\n        \"Integers (int)\",\n        \"Floating-point numbers (float)\",\n        \"Strings (str)\",\n        \"Booleans (bool)\",\n        \"Variables: Declaration and Assignment\",\n        \"Basic arithmetic operators (+, -, *, /, //, %, **)\",\n           \"Comparison Operators (==, !=, >, <, >=, <=)\"\n\n      ]\n    },\n       {\n      \"chapterNumber\": 3,\n      \"chapterTitle\": \"Working with Strings\",\n       \"chapterEmoji\": \"💬\",\n      \"summary\": \"This chapter focuses on Strings in Python. It explores how to create, manipulate and format strings. Learn about common methods available for strings.\",\n      \"topics\": [\n        \"String creation\",\n        \"String Concatenation and Repetition\",\n        \"String Indexing and Slicing\",\n         \"String length\",\n        \"Common string methods (lower(), upper(), strip(), replace(), find())\",\n        \"String formatting (f-strings)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 4,\n      \"chapterTitle\": \"Control Flow: Conditional Statements\",\n       \"chapterEmoji\": \"🚦\",\n      \"summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow your code to make decisions based on conditions. Learn to write programs that behave differently.\",\n      \"topics\": [\n        \"The `if` statement\",\n        \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements\",\n        \"Logical operators (`and`, `or`, `not`)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 5,\n      \"chapterTitle\": \"Control Flow: Loops\",\n       \"chapterEmoji\": \"🔄\",\n      \"summary\": \"This chapter covers `for` and `while` loops, enabling you to repeat code blocks efficiently. Understand how to iterate through lists and perform repetitive tasks.\",\n      \"topics\": [\n        \"The `for` loop\",\n         \"Iterating through lists\",\n         \"The `while` loop\",\n         \"Break and continue statements\"\n      ]\n    },\n    {\n      \"chapterNumber\": 6,\n      \"chapterTitle\": \"Lists in Python\",\n       \"chapterEmoji\": \"🧾\",\n      \"summary\": \"This chapter introduces Python lists, which are used to store collections of items. You'll learn about creating, modifying, and iterating through lists.\",\n      \"topics\": [\n          \"Creating lists\",\n          \"Accessing list elements\",\n          \"Modifying list elements\",\n          \"List methods (append(), insert(), remove(), pop(), len())\",\n          \"Iterating through lists with loops\"\n       ]\n    },\n     {\n      \"chapterNumber\": 7,\n      \"chapterTitle\": \"Introduction to Functions\",\n      \"chapterEmoji\": \"⚙️\",\n      \"summary\": \"This chapter introduces functions, their purpose, and syntax. Learn how to define and call basic functions to reuse code.\",\n       \"topics\": [\n        \"Defining a function using def\",\n         \"Calling a function\",\n         \"Function parameters and arguments\",\n         \"Returning a value\",\n         \"Basic scope concept(Local variable)\"\n      ]\n    }\n  ]\n}\n```\n**How to use this JSON:**\n\n1.  **Copy the JSON:** Copy the entire JSON block above.\n2.  **Parse with Python:** If you are using Python you can parse it like this:\n    ```python\n    import json\n\n    json_data = \"\"\"\n        {\n          \"courseTitle\": \"Python Fundamentals for Beginners\",\n          \"courseSummary\": \"This course provides a gentle introduction to the Python programming language. It covers basic syntax, data types, control flow, and simple functions, equipping you with the foundational knowledge to write basic Python programs.  It aims to build a solid understanding before moving onto more advanced topics.\",\n          \"levelOfDifficulty\": \"Easy\",\n          \"chapters\": [\n            {\n              \"chapterNumber\": 1,\n              \"chapterTitle\": \"Introduction to Python\",\n              \"chapterEmoji\": \"👋\",\n              \"summary\": \"This chapter introduces the Python language, its history, why it's popular, and how to set up your development environment. You will also write and run your first basic Python code.\",\n              \"topics\": [\n                \"What is Python?\",\n                \"Why Python?\",\n                \"Setting up Python Environment\",\n                \"Running your first Python program (Hello World)\",\n                  \"Basic Syntax (comments)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 2,\n              \"chapterTitle\": \"Data Types and Variables\",\n               \"chapterEmoji\": \"🧮\",\n              \"summary\": \"This chapter explains the core data types in Python (integers, floats, strings, and booleans) and how to declare and use variables to store them. It introduces the concept of operators\",\n              \"topics\": [\n                \"Integers (int)\",\n                \"Floating-point numbers (float)\",\n                \"Strings (str)\",\n                \"Booleans (bool)\",\n                \"Variables: Declaration and Assignment\",\n                \"Basic arithmetic operators (+, -, *, /, //, %, **)\",\n                   \"Comparison Operators (==, !=, >, <, >=, <=)\"\n\n              ]\n            },\n               {\n              \"chapterNumber\": 3,\n              \"chapterTitle\": \"Working with Strings\",\n               \"chapterEmoji\": \"💬\",\n              \"summary\": \"This chapter focuses on Strings in Python. It explores how to create, manipulate and format strings. Learn about common methods available for strings.\",\n              \"topics\": [\n                \"String creation\",\n                \"String Concatenation and Repetition\",\n                \"String Indexing and Slicing\",\n                 \"String length\",\n                \"Common string methods (lower(), upper(), strip(), replace(), find())\",\n                \"String formatting (f-strings)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 4,\n              \"chapterTitle\": \"Control Flow: Conditional Statements\",\n               \"chapterEmoji\": \"🚦\",\n              \"summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow your code to make decisions based on conditions. Learn to write programs that behave differently.\",\n              \"topics\": [\n                \"The `if` statement\",\n                \"The `if-else` statement\",\n                \"The `if-elif-else` statement\",\n                \"Nested `if` statements\",\n                \"Logical operators (`and`, `or`, `not`)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 5,\n              \"chapterTitle\": \"Control Flow: Loops\",\n               \"chapterEmoji\": \"🔄\",\n              \"summary\": \"This chapter covers `for` and `while` loops, enabling you to repeat code blocks efficiently. Understand how to iterate through lists and perform repetitive tasks.\",\n              \"topics\": [\n                \"The `for` loop\",\n                 \"Iterating through lists\",\n                 \"The `while` loop\",\n                 \"Break and continue statements\"\n              ]\n            },\n            {\n              \"chapterNumber\": 6,\n              \"chapterTitle\": \"Lists in Python\",\n               \"chapterEmoji\": \"🧾\",\n              \"summary\": \"This chapter introduces Python lists, which are used to store collections of items. You'll learn about creating, modifying, and iterating through lists.\",\n              \"topics\": [\n                  \"Creating lists\",\n                  \"Accessing list elements\",\n                  \"Modifying list elements\",\n                  \"List methods (append(), insert(), remove(), pop(), len())\",\n                  \"Iterating through lists with loops\"\n               ]\n            },\n             {\n              \"chapterNumber\": 7,\n              \"chapterTitle\": \"Introduction to Functions\",\n              \"chapterEmoji\": \"⚙️\",\n              \"summary\": \"This chapter introduces functions, their purpose, and syntax. Learn how to define and call basic functions to reuse code.\",\n               \"topics\": [\n                \"Defining a function using def\",\n                 \"Calling a function\",\n                 \"Function parameters and arguments\",\n                 \"Returning a value\",\n                 \"Basic scope concept(Local variable)\"\n              ]\n            }\n          ]\n        }\n    \"\"\"\n    data = json.loads(json_data)\n    print(data['courseTitle'])\n    for chapter in data['chapters']:\n      print(f\"Chapter {chapter['chapterNumber']}: {chapter['chapterTitle']} {chapter['chapterEmoji']}\")\n      print(f\"  Summary: {chapter['summary']}\")\n      print(\"  Topics:\")\n      for topic in chapter['topics']:\n        print(f\"    - {topic}\")\n    ```\n\nThis will output a structured view of the course material.\n**Key Features for Easy Difficulty:**\n\n*   **Basic Concepts:** Focuses on the most fundamental concepts in Python.\n*   **Clear Explanations:** Summaries are written in a beginner-friendly style.\n*   **Sequential Learning:** Chapters are designed to build on previous ones.\n*   **Concrete Examples (Not included in JSON):** In real teaching, use simple, clear code examples to illustrate each concept.\n\nThis JSON data structure provides an organized and easily accessible way to create course material and can be further processed for display in various formats, such as a webpage, document, etc.\n"},
            ],
          },
        ],
    });
  
    //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    //console.log(result.response.text());
 
   export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate exam material detail content for each chapter Make sure to includes all topics print in the\ndetailed content with examples,codes,resource links and by the learning these generate next roadmap based on these learning, make sure to give content in HTML format (Do not Add HTMLK Head, Body, title tag), The\nchapters and highlight the titles and subtitles,provide space and highlight  the examples and code snipets"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n<div class=\"exam-material\">\n\n    <h1>Chapter 1: Introduction to Python Programming</h1>\n    <hr>\n\n    <h2>1.1: Setting Up Your Python Environment</h2>\n        <h3>Topics Covered:</h3>\n        <ul>\n            <li>Downloading and Installing Python</li>\n            <li>Choosing a Code Editor (e.g., VS Code, PyCharm)</li>\n            <li>Understanding the Python Interpreter</li>\n            <li>Running Your First Python Program</li>\n        </ul>\n\n        <h3>Examples:</h3>\n\n        <p><b>Example 1: Running a simple \"Hello, World!\" program.</b></p>\n        <pre><code>\n            print(\"Hello, World!\")\n        </code></pre>\n\n         <p><b>Explanation:</b> This code snippet uses the built-in <code>print()</code> function to display the text \"Hello, World!\" on the console.</p>\n\n\n        <h3>Resource Links:</h3>\n        <ul>\n            <li><a href=\"https://www.python.org/downloads/\">Python Download Page</a></li>\n            <li><a href=\"https://code.visualstudio.com/\">VS Code Download Page</a></li>\n             <li><a href=\"https://www.jetbrains.com/pycharm/\">PyCharm Download Page</a></li>\n        </ul>\n\n        <h3>Next Roadmap After Learning:</h3>\n        <p>After setting up your environment, you are ready to explore basic syntax and data types. Move to chapter 1.2 & 1.3 to learn basic python syntax and data types.</p>\n    \n    <hr>\n    <h2>1.2: Python Syntax and Basic Input/Output</h2>\n\n        <h3>Topics Covered:</h3>\n        <ul>\n            <li>Variables and Data Types (integers, floats, strings, booleans)</li>\n            <li>Basic Operators (+, -, *, /, %, //, **)</li>\n            <li>Comments and Indentation</li>\n            <li>Inputting Data Using `input()`</li>\n            <li>Outputting Data Using `print()`</li>\n        </ul>\n\n        <h3>Examples:</h3>\n\n        <p><b>Example 1: Variable Assignment and Basic Arithmetic Operations</b></p>\n        <pre><code>\n            age = 30\n            price = 19.99\n            name = \"Alice\"\n            is_student = False\n            sum_result = age + price\n            \n            print(sum_result) # Output will be 49.99\n            print(name) # Output will be \"Alice\"\n        </code></pre>\n        <p><b>Explanation:</b> This snippet demonstrates variable assignments, various data types, and basic arithmetic. It initializes variables with different types and perform an addition operation.</p>\n       <br>\n        \n        <p><b>Example 2: Input and Output</b></p>\n        <pre><code>\n            name = input(\"Enter your name: \")\n            print(\"Hello, \" + name + \"!\")\n            age = int(input(\"Enter your age: \"))\n            print(\"You are \" + str(age) + \" years old.\")\n        </code></pre>\n        <p><b>Explanation:</b>  Here, we use <code>input()</code> to get user input, and <code>print()</code> to display messages. The data input are always string type, we have to explicitly conver them to specific data types.</p>\n\n        <h3>Resource Links:</h3>\n         <ul>\n            <li><a href=\"https://docs.python.org/3/tutorial/introduction.html\">Python Tutorial</a></li>\n\n        </ul>\n\n         <h3>Next Roadmap After Learning:</h3>\n        <p>With a handle on syntax and basic input/output, you're ready to explore control flow using conditionals and loops. Proceed to Chapter 2 to explore control flow.</p>\n\n    <hr>\n\n    <h2>1.3: Working with Strings</h2>\n        <h3>Topics Covered:</h3>\n        <ul>\n            <li>String Literals</li>\n            <li>String Concatenation and Repetition</li>\n            <li>String Indexing and Slicing</li>\n            <li>String Methods (e.g., `len()`, `upper()`, `lower()`, `strip()`, `split()`)</li>\n            <li>String Formatting (f-strings, `format()`)</li>\n        </ul>\n\n        <h3>Examples:</h3>\n        \n         <p><b>Example 1: String Concatenation and Length</b></p>\n         <pre><code>\n            first_name = \"John\"\n            last_name = \"Doe\"\n            full_name = first_name + \" \" + last_name\n            length = len(full_name)\n            print(full_name) #Output will be \"John Doe\"\n            print(length) # Output will be 8\n         </code></pre>\n          <p><b>Explanation:</b> This snippet demonstrates string concatenation and the use of the `len()` function to find the length of the string.</p>\n           <br>\n\n          <p><b>Example 2: String Indexing and Slicing</b></p>\n         <pre><code>\n            message = \"Python is awesome\"\n            first_char = message[0]\n            last_char = message[-1]\n            sub_string = message[0:6]\n            print(first_char) #Output will be \"P\"\n            print(last_char) # Output will be \"e\"\n            print(sub_string) #Output will be \"Python\"\n         </code></pre>\n         <p><b>Explanation:</b> This example shows string indexing and how to slice strings to extract parts of them.</p>\n        <br>\n        <p><b>Example 3: String Methods and Formatting</b></p>\n         <pre><code>\n           text = \"   hello world   \"\n           text_upper = text.upper()\n           text_stripped = text.strip()\n           text_split = text_stripped.split()\n\n           name = \"Bob\"\n           age = 30\n           formatted_string = f\"Name: {name}, Age: {age}\"\n           print(text_upper) #Output will be \"   HELLO WORLD   \"\n           print(text_stripped) #Output will be \"hello world\"\n           print(text_split) #Output will be [\"hello\", \"world\"]\n           print(formatted_string) #Output will be \"Name: Bob, Age: 30\"\n         </code></pre>\n\n          <p><b>Explanation:</b> This example introduces common string methods, and demonstrates f-string formatting for creating formatted output.</p>\n         \n\n        <h3>Resource Links:</h3>\n        <ul>\n            <li><a href=\"https://docs.python.org/3/library/string.html\">Python String Methods Documentation</a></li>\n        </ul>\n\n        <h3>Next Roadmap After Learning:</h3>\n        <p>You've mastered the basics of string manipulation. Next up, it's time to start using control structures, which help you control the flow of your programs, check out chapter 2.</p>\n\n    <hr>\n    <h1>Chapter 2: Control Flow</h1>\n    <hr>\n\n        <h2>2.1: Conditional Statements (if, elif, else)</h2>\n            <h3>Topics Covered:</h3>\n            <ul>\n                <li>`if` statements</li>\n                <li>`if-else` statements</li>\n                <li>`if-elif-else` statements</li>\n                <li>Nested `if` statements</li>\n                <li>Comparison operators (==, !=, >, <, >=, <=)</li>\n                <li>Logical operators (and, or, not)</li>\n             </ul>\n\n            <h3>Examples:</h3>\n\n             <p><b>Example 1: Basic if statement</b></p>\n                <pre><code>\n                    age = 20\n                    if age >= 18:\n                        print(\"You are an adult.\")\n                </code></pre>\n                  <p><b>Explanation:</b> This snippet demonstrates a basic if condition that checks if the value of age is greater or equal to 18, if it is, it displays \"You are an adult.\"</p>\n                  <br>\n            <p><b>Example 2: if-else statement</b></p>\n                <pre><code>\n                    number = 5\n                    if number % 2 == 0:\n                        print(\"The number is even.\")\n                    else:\n                        print(\"The number is odd.\")\n                </code></pre>\n                   <p><b>Explanation:</b> This shows how if-else works to implement conditions that perform an alternate block of code when the original if condition is not satisfied.</p>\n                   <br>\n\n            <p><b>Example 3: if-elif-else statement</b></p>\n                <pre><code>\n                    score = 85\n                    if score >= 90:\n                       print(\"A\")\n                    elif score >= 80:\n                       print(\"B\")\n                    elif score >= 70:\n                        print(\"C\")\n                    else:\n                       print(\"D\")\n                </code></pre>\n                  <p><b>Explanation:</b> This example demonstrates how to use `elif` conditions to handle multiple conditions. Here based on the score the output can be A, B, C or D.</p>\n                   <br>\n            <p><b>Example 4: Nested if statement</b></p>\n                <pre><code>\n                x = 10\n                if x > 5:\n                    print(\"x is greater than 5\")\n                    if x > 8:\n                      print(\"x is also greater than 8\")\n                </code></pre>\n                  <p><b>Explanation:</b> This example demonstrates how nested if conditions work, the inner condition checks whether x is greater than 8 inside the outer condition which checks whether x is greater than 5.</p>\n                   <br>\n             <p><b>Example 5: Using Logical Operators</b></p>\n                <pre><code>\n                    age = 25\n                    has_license = True\n                    if age >= 18 and has_license:\n                        print(\"You can drive\")\n\n                    if not(age > 100):\n                        print(\"You are probably a young person\")\n                </code></pre>\n                  <p><b>Explanation:</b> This shows how to use the `and` and `not` logical operators to check multiple conditions.</p>\n                  <br>\n            <h3>Resource Links:</h3>\n                <ul>\n                     <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html\">Python Control Flow Documentation</a></li>\n                </ul>\n             <h3>Next Roadmap After Learning:</h3>\n                <p>After mastering conditional statements, you can now use loops, which are the next logical step for implementing repetition in your programs, proceed to 2.2.</p>\n    <hr>\n        <h2>2.2: Loops (for and while)</h2>\n             <h3>Topics Covered:</h3>\n                <ul>\n                <li>`for` loops (iterating through sequences)</li>\n                <li>`while` loops</li>\n                <li>Loop Control Statements (`break`, `continue`)</li>\n                <li>`else` clause with loops</li>\n                 <li>Nested Loops</li>\n                </ul>\n             <h3>Examples:</h3>\n                <p><b>Example 1: for loop with range()</b></p>\n                   <pre><code>\n                    for i in range(5):\n                        print(i) #Output will be 0,1,2,3,4\n                   </code></pre>\n                    <p><b>Explanation:</b> This demonstrates using `for` loop with the `range()` function to iterate over a sequence of numbers.</p>\n                   <br>\n                <p><b>Example 2: for loop iterating over a list</b></p>\n                   <pre><code>\n                      colors = [\"red\", \"green\", \"blue\"]\n                      for color in colors:\n                        print(color) #Output will be red, green, blue each in a new line.\n                    </code></pre>\n                    <p><b>Explanation:</b> This demonstrates how to iterate over items in a list using a `for` loop.</p>\n                    <br>\n                <p><b>Example 3: while loop</b></p>\n                   <pre><code>\n                    count = 0\n                    while count < 5:\n                       print(count)\n                       count += 1 #Output will be 0,1,2,3,4\n                    </code></pre>\n                     <p><b>Explanation:</b> This snippet shows a `while` loop that continues to execute as long as the condition `count < 5` is true.</p>\n                     <br>\n                <p><b>Example 4: break and continue statement</b></p>\n                  <pre><code>\n                  for i in range(10):\n                    if i == 3:\n                       continue #skip printing i = 3\n                    if i == 7:\n                       break #exit the loop\n                    print(i)\n                  #Output will be 0,1,2,4,5,6\n                  </code></pre>\n                    <p><b>Explanation:</b> This example demonstrates how to use `break` to prematurely exit the loop and `continue` to skip the rest of the current loop's code.</p>\n                      <br>\n               <p><b>Example 5: else clause in loops</b></p>\n                  <pre><code>\n                    for i in range(5):\n                      print(i)\n                    else:\n                        print(\"loop finished\") #Output will be 0,1,2,3,4 and \"loop finished\"\n                  </code></pre>\n                     <p><b>Explanation:</b>  The `else` clause is executed only when the loop exits normally without encountering a `break` statement.</p>\n                      <br>\n                <p><b>Example 6: Nested Loops</b></p>\n                  <pre><code>\n                    for i in range(2):\n                        for j in range(3):\n                            print(i,j) # Output will be (0,0), (0,1), (0,2), (1,0), (1,1),(1,2)\n                  </code></pre>\n                    <p><b>Explanation:</b> This shows how to use loops within loops, known as nested loops, which can be used for working with multi dimensional data such as a matrix.</p>\n                      <br>\n                <h3>Resource Links:</h3>\n                 <ul>\n                   <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html#for-statements\">Python For Loops Documentation</a></li>\n                    <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html#while-statements\">Python While Loops Documentation</a></li>\n                  </ul>\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>Now that you can control the flow of your programs, the next step is to learn how to use functions which encapsulate reusable parts of your program, proceed to chapter 3.</p>\n     <hr>\n     <h1>Chapter 3: Functions and Modules</h1>\n    <hr>\n    <h2>3.1: Defining and Calling Functions</h2>\n            <h3>Topics Covered:</h3>\n            <ul>\n                <li>Function definitions using `def`</li>\n                <li>Function parameters (positional, keyword, default)</li>\n                <li>Returning values from functions using `return`</li>\n                <li>Function Scope (local and global variables)</li>\n                <li>Docstrings and Function Documentation</li>\n            </ul>\n           <h3>Examples:</h3>\n\n            <p><b>Example 1: Simple function with parameters and return values</b></p>\n                <pre><code>\n                    def add(x,y):\n                        sum_result = x + y\n                        return sum_result\n                    result = add(5,3)\n                    print(result) # Output will be 8\n                </code></pre>\n                  <p><b>Explanation:</b> This example defines a function `add` that takes two arguments and returns their sum.</p>\n                 <br>\n            <p><b>Example 2: Keyword and default arguments</b></p>\n                <pre><code>\n                    def greet(name, message=\"Hello\"):\n                        print(message + \", \" + name + \"!\")\n                    greet(\"Alice\") # Output will be \"Hello, Alice!\"\n                    greet(\"Bob\", \"Good Morning\") # Output will be \"Good Morning, Bob!\"\n                </code></pre>\n                  <p><b>Explanation:</b>  This example demonstrates how to use keyword arguments and default parameter values.</p>\n                <br>\n            <p><b>Example 3: Variable Scope</b></p>\n                <pre><code>\n                    global_var = 10\n                    def function_scope():\n                      local_var = 5\n                      print(\"local_var in scope\", local_var)\n                      print(\"global_var in scope\", global_var)\n                    function_scope()\n                    print(\"global_var outside scope\", global_var)\n\n                    # This will generate a NameError, since the local_var is not visible outside function\n                    # print(\"local_var outside scope\", local_var)\n                </code></pre>\n                  <p><b>Explanation:</b> This example shows the scope of local and global variables.</p>\n                <br>\n            <p><b>Example 4: Function Docstring</b></p>\n                <pre><code>\n                    def area_of_rectangle(length, width):\n                      \"\"\"\n                       Calculates the area of rectangle.\n                       Args:\n                            length: Length of the rectangle.\n                            width: Width of the rectangle.\n                       Returns:\n                           The area of the rectangle.\n                      \"\"\"\n                      area = length * width\n                      return area\n                    help(area_of_rectangle) # This will print the function description or docstring.\n                    \n                </code></pre>\n                 <p><b>Explanation:</b> This shows how to include a docstring for function documentation, can be useful to understand what a function does and how to use it without having to look at implementation.</p>\n                <br>\n            <h3>Resource Links:</h3>\n                <ul>\n                    <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">Python Function Definition Documentation</a></li>\n                </ul>\n            <h3>Next Roadmap After Learning:</h3>\n                    <p>Now that you are able to define and use functions, you can start using modules which can group functions and other data structures, proceed to 3.2.</p>\n    <hr>\n    <h2>3.2: Working with Modules and Packages</h2>\n         <h3>Topics Covered:</h3>\n            <ul>\n                <li>Importing modules (using `import`, `from ... import`)</li>\n                <li>Built-in modules (e.g., `math`, `random`, `datetime`)</li>\n                <li>Creating and Using custom Modules</li>\n                <li>Understanding Packages and Sub-packages</li>\n                <li>Installing and Using external packages (e.g., using pip)</li>\n             </ul>\n           <h3>Examples:</h3>\n             <p><b>Example 1: Importing the math module</b></p>\n                <pre><code>\n                    import math\n                    sqrt_val = math.sqrt(25)\n                    print(sqrt_val) # Output will be 5\n                    pi_val = math.pi\n                    print(pi_val) # Output will be 3.141592653589793\n                </code></pre>\n                  <p><b>Explanation:</b> This demonstrates importing and using the functions in built-in math module.</p>\n                  <br>\n\n             <p><b>Example 2: Importing a specific item from a module</b></p>\n                <pre><code>\n                    from random import randint\n                    random_number = randint(1,10) # generate random integers between 1 and 10\n                    print(random_number)\n                </code></pre>\n                 <p><b>Explanation:</b> This shows how to import individual items from a module using from import.</p>\n                 <br>\n              <p><b>Example 3: Creating custom module</b></p>\n                <pre><code>\n                #Create a file named my_module.py with this content\n                    def add(x,y):\n                         return x+y\n                 # In another python file import the module to use\n                 # import my_module\n                 # result = my_module.add(5,3)\n                 # print(result) # Output will be 8\n                 </code></pre>\n                <p><b>Explanation:</b> This example shows how to create custom modules by creating a new python file (.py) and importing the functionality.</p>\n                 <br>\n            <p><b>Example 4: Package import</b></p>\n               <pre><code>\n                 # create a directory named my_package, inside of my_package create an empty file named __init__.py and a file named my_module.py with below content\n                 #Inside my_module.py\n                 def add(x,y):\n                      return x+y\n                  # In another python file import the module to use\n                  # from my_package import my_module\n                  # result = my_module.add(5,3)\n                  # print(result) # Output will be 8\n                </code></pre>\n                <p><b>Explanation:</b> This example demonstrates how to organize modules into packages.</p>\n                 <br>\n             <p><b>Example 5: Installing external package using pip</b></p>\n                <pre><code>\n                # To install a package use pip:\n                # pip install requests\n                # In a python file\n                # import requests\n                # response = requests.get('https://www.google.com')\n                # print(response)\n                </code></pre>\n                <p><b>Explanation:</b> This example shows how to install an external package, in this case `requests` which can be used to retrieve contents from web pages. Before running the code make sure to install the module using `pip install requests`</p>\n                 <br>\n            <h3>Resource Links:</h3>\n                <ul>\n                     <li><a href=\"https://docs.python.org/3/tutorial/modules.html\">Python Modules Documentation</a></li>\n                     <li><a href=\"https://pip.pypa.io/en/stable/\">pip Documentation</a></li>\n                </ul>\n            <h3>Next Roadmap After Learning:</h3>\n                    <p>You have now mastered the basics of functions and modules. The next step is to learn how to use data structures, which can help manage and organize different types of data, continue to chapter 4.</p>\n        <hr>\n    <h1>Chapter 4: Data Structures</h1>\n    <hr>\n    <h2>4.1: Lists</h2>\n            <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Creating and accessing lists</li>\n                    <li>List operations (appending, inserting, removing)</li>\n                    <li>List slicing</li>\n                    <li>List methods (e.g., `append()`, `insert()`, `remove()`, `pop()`, `sort()`)</li>\n                    <li>List comprehensions</li>\n                    <li>Nested lists</li>\n                 </ul>\n\n             <h3>Examples:</h3>\n                 <p><b>Example 1: Creating and accessing Lists</b></p>\n                   <pre><code>\n                   my_list = [1,2,3,\"apple\", \"banana\"]\n                   first_item = my_list[0]\n                   last_item = my_list[-1]\n                   print(first_item) # Output will be 1\n                   print(last_item) # Output will be banana\n                   </code></pre>\n                     <p><b>Explanation:</b> This demonstrates how to create a list and access items using their indices.</p>\n                     <br>\n\n                  <p><b>Example 2: List Operations (append, insert, remove)</b></p>\n                    <pre><code>\n                    my_list = [1,2,3]\n                    my_list.append(4)\n                    print(my_list) #Output will be [1, 2, 3, 4]\n                    my_list.insert(1,5)\n                    print(my_list) # Output will be [1, 5, 2, 3, 4]\n                    my_list.remove(3)\n                    print(my_list) # Output will be [1, 5, 2, 4]\n                     </code></pre>\n                     <p><b>Explanation:</b> This shows list operations like appending, inserting, and removing items.</p>\n                      <br>\n                 <p><b>Example 3: List Slicing</b></p>\n                    <pre><code>\n                      my_list = [10,20,30,40,50]\n                      sliced_list = my_list[1:4]\n                      print(sliced_list) # Output will be [20,30,40]\n                     </code></pre>\n                    <p><b>Explanation:</b> This demonstrates how to slice a list to extract a subset of items.</p>\n                     <br>\n\n                  <p><b>Example 4: List methods (pop and sort)</b></p>\n                   <pre><code>\n                    my_list = [5,2,8,1,9]\n                    popped_element = my_list.pop()\n                    print(\"Popped Element:\", popped_element) # Output will be 9\n                    my_list.sort()\n                    print(\"Sorted List:\", my_list) # Output will be [1,2,5,8]\n                    </code></pre>\n                    <p><b>Explanation:</b> This snippet demonstrates list methods such as pop to remove last element and sort to sort a list in ascending order</p>\n                     <br>\n                   <p><b>Example 5: List comprehensions</b></p>\n                    <pre><code>\n                       numbers = [1,2,3,4,5]\n                       squared_numbers = [x**2 for x in numbers]\n                       even_numbers = [x for x in numbers if x % 2 == 0]\n\n                       print(\"Squared Numbers:\", squared_numbers) #Output will be [1, 4, 9, 16, 25]\n                       print(\"Even Numbers:\", even_numbers) #Output will be [2,4]\n                     </code></pre>\n                    <p><b>Explanation:</b> This shows how to create lists using list comprehension to perform operations and condition.</p>\n                     <br>\n                  <p><b>Example 6: Nested Lists</b></p>\n                    <pre><code>\n                       matrix = [[1,2,3], [4,5,6], [7,8,9]]\n                       print(matrix[0][1]) # Output will be 2\n                    </code></pre>\n                    <p><b>Explanation:</b> This shows how to create nested lists and access items, it is used for representing multi dimensional data such as matrix.</p>\n                     <br>\n                <h3>Resource Links:</h3>\n                    <ul>\n                       <li><a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\">Python List Documentation</a></li>\n                   </ul>\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>With the understanding of lists, you're now ready to explore another fundamental data structure, which is tuples, proceed to 4.2.</p>\n     <hr>\n    <h2>4.2: Tuples</h2>\n         <h3>Topics Covered:</h3>\n            <ul>\n                <li>Creating tuples</li>\n                <li>Tuple packing and unpacking</li>\n                <li>Immutability of tuples</li>\n                <li>When to use tuples vs. lists</li>\n            </ul>\n          <h3>Examples:</h3>\n              <p><b>Example 1: Creating and Accessing Tuples</b></p>\n                 <pre><code>\n                   my_tuple = (1,2,3, \"apple\", \"banana\")\n                   first_item = my_tuple[0]\n                   last_item = my_tuple[-1]\n                   print(first_item) # Output will be 1\n                   print(last_item) # Output will be \"banana\"\n                 </code></pre>\n                  <p><b>Explanation:</b> This shows how to create a tuple and access individual elements using their indices.</p>\n                 <br>\n              <p><b>Example 2: Tuple packing and unpacking</b></p>\n                <pre><code>\n                  my_tuple = 1,2,3  #tuple packing\n                  x,y,z = my_tuple  # tuple unpacking\n                  print(\"x:\",x) #Output will be x: 1\n                  print(\"y:\",y) #Output will be y: 2\n                  print(\"z:\",z) #Output will be z: 3\n                </code></pre>\n                <p><b>Explanation:</b> This demonstrates tuple packing and unpacking, tuple packing is creating a tuple without paranthesis while tuple unpacking is assignment of values to variables.</p>\n                 <br>\n              <p><b>Example 3: Immutability of tuples</b></p>\n                <pre><code>\n                  my_tuple = (1,2,3)\n                  #my_tuple[0] = 5 # This will generate an error as tuples are immutable\n                  print(my_tuple) #Output will be (1,2,3)\n                </code></pre>\n                <p><b>Explanation:</b> This shows that tuples are immutable and their values can't be changed after creation.</p>\n                 <br>\n             <p><b>Example 4: Use case to return multiple values</b></p>\n                <pre><code>\n                   def get_coordinates():\n                       x = 10\n                       y = 20\n                       return x,y  #returns a tuple\n                   coordinate_tuple = get_coordinates()\n                   print(coordinate_tuple)  # Output will be (10,20)\n                </code></pre>\n                <p><b>Explanation:</b> This example shows a typical use case of tuple when a function returns multiple values.</p>\n                 <br>\n\n                <h3>Resource Links:</h3>\n                   <ul>\n                     <li><a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">Python Tuples Documentation</a></li>\n                   </ul>\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>Now that you are familiar with immutable tuples, you're ready to explore dictionaries, which is another fundamental data structure that can help store key value pairs, proceed to 4.3.</p>\n     <hr>\n   <h2>4.3: Dictionaries</h2>\n          <h3>Topics Covered:</h3>\n            <ul>\n                 <li>Creating and accessing dictionaries</li>\n                 <li>Dictionary operations (adding, updating, removing)</li>\n                 <li>Dictionary methods (e.g., `keys()`, `values()`, `items()`, `get()`)</li>\n                 <li>Dictionary comprehensions</li>\n                 <li>When to use dictionaries</li>\n             </ul>\n          <h3>Examples:</h3>\n              <p><b>Example 1: Creating and Accessing Dictionaries</b></p>\n                 <pre><code>\n                    my_dict = {\"name\": \"John\", \"age\":30, \"city\":\"New York\"}\n                    name = my_dict[\"name\"]\n                    age = my_dict.get(\"age\")\n                    print(name) # Output will be \"John\"\n                    print(age) #Output will be 30\n                 </code></pre>\n                  <p><b>Explanation:</b> This example shows how to create a dictionary and access items using keys.</p>\n                  <br>\n              <p><b>Example 2: Dictionary Operations (Add, Update, Remove)</b></p>\n                <pre><code>\n                    my_dict = {\"name\": \"John\", \"age\":30}\n                    my_dict[\"city\"] = \"New York\" #add new item\n                    my_dict[\"age\"] = 31  # Update existing key\n                    del my_dict[\"name\"] #Remove item\n                    print(my_dict) # Output will be {'age': 31, 'city': 'New York'}\n                  </code></pre>\n                  <p><b>Explanation:</b> This demonstrates how to add, update and remove items from a dictionary using keys.</p>\n                   <br>\n              <p><b>Example 3: Dictionary Methods (keys, values, items)</b></p>\n                <pre><code>\n                    my_dict = {\"name\": \"John\", \"age\":30, \"city\":\"New York\"}\n                    keys = my_dict.keys()\n                    values = my_dict.values()\n                    items = my_dict.items()\n                    print(\"keys:\",keys) # Output will be dict_keys(['name', 'age', 'city'])\n                    print(\"values:\",values) # Output will be dict_values(['John', 30, 'New York'])\n                    print(\"items:\",items) # Output will be dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\n                  </code></pre>\n                <p><b>Explanation:</b> This example shows how to extract keys, values, and items of a dictionary as list of keys, values and tuples respectively.</p>\n                  <br>\n             <p><b>Example 4: Dictionary Comprehension</b></p>\n                <pre><code>\n                   numbers = [1,2,3,4,5]\n                   squared_dict = {num:num**2 for num in numbers}\n                   print(\"Squared Dictionary:\", squared_dict) # Output will be {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n                  </code></pre>\n                <p><b>Explanation:</b> This snippet uses dictionary comprehensions to create a new dictionary from existing data.</p>\n                  <br>\n\n                <h3>Resource Links:</h3>\n                 <ul>\n                     <li><a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\">Python Dictionaries Documentation</a></li>\n                </ul>\n                <h3>Next Roadmap After Learning:</h3>\n                <p>You've gained a good understanding of dictionaries. Next, you can explore file handling which is important for dealing with persistence data, proceed to chapter 5.</p>\n    <hr>\n    <h1>Chapter 5: File Handling</h1>\n    <hr>\n    <h2>5.1: Reading from Files</h2>\n          <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Opening files using the `open()` function</li>\n                    <li>Reading files line by line</li>\n                     <li>Reading entire files into strings</li>\n                    <li>Closing files (using `close()` and `with`)</li>\n                 </ul>\n          <h3>Examples:</h3>\n              <p><b>Example 1: Reading file using `open()` and `close()`</b></p>\n                <pre><code>\n                #Create a file named text.txt with below content\n                # This is first line\n                # This is second line\n                # This is third line\n                  file = open('text.txt', 'r') # r for read\n                  for line in file:\n                      print(line.strip()) #strip to remove trailing spaces and new lines\n                  file.close()\n                  #Output will be\n                   #This is first line\n                   #This is second line\n                   #This is third line\n                </code></pre>\n                  <p><b>Explanation:</b> This example demonstrates opening a file, reading each line using a `for` loop and closing the file.</p>\n                 <br>\n\n              <p><b>Example 2: Reading file using `with open()`</b></p>\n                <pre><code>\n                    with open('text.txt', 'r') as file:\n                        for line in file:\n                           print(line.strip())\n\n                   #Output will be\n                    #This is first line\n                    #This is second line\n                    #This is third line\n                </code></pre>\n                <p><b>Explanation:</b>  The `with open()` structure manages automatic opening and closing of files, it is the recommended way to read files.</p>\n                  <br>\n              <p><b>Example 3: Reading the entire file into a string</b></p>\n               <pre><code>\n                 with open('text.txt', 'r') as file:\n                     content = file.read()\n                     print(content)\n                 # Output will be\n                # This is first line\n                # This is second line\n                # This is third line\n                </code></pre>\n                <p><b>Explanation:</b> The `read()` function is used to read the entire file content at once.</p>\n                  <br>\n\n                <h3>Resource Links:</h3>\n                    <ul>\n                       <li><a href=\"https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files\">Python File Reading Documentation</a></li>\n                  </ul>\n                <h3>Next Roadmap After Learning:</h3>\n                 <p>Having learned how to read files, you're now ready to explore how to write to files, proceed to 5.2</p>\n    <hr>\n     <h2>5.2: Writing to Files</h2>\n            <h3>"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "the style should come like these ```html    <style>        body {            font-family: sans-serif;            line-height: 1.6;            margin: 20px;            color: #333;            background-color: #f9f9f9;        }        h1,        h2 {            text-align: center;            color: #0056b3;            border-bottom: 2px solid #0056b3;            padding-bottom: 5px;            margin-bottom: 20px;        }        h2{            margin-top: 40px;        }        h3 {            color: #0056b3;            margin-bottom: 10px;        }        code {            background-color: #f0f0f0;            padding: 5px 10px;            border-radius: 5px;            display: block;            overflow-x: auto;            white-space: pre;            margin: 10px 0;        }                 .example{            padding: 20px;            border-radius: 8px;            background-color: white;            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);            margin-bottom: 30px;        }        .example p{            margin-bottom: 10px;        }            </style>    <h1>🚦 Control Flow: Conditional Statements</h1>    <div class=\"example\">        <h3>Chapter Summary</h3>        <p>This chapter covers conditional statements in C. You will learn to use 'if', 'else', and 'else if' statements to control program execution based on certain conditions.</p>    </div>    <div class=\"example\">        <h3>The 'if' statement</h3>        <p>The 'if' statement executes a block of code if a specified condition is true.</p>        <p><strong>Syntax:</strong></p>        <pre><code>            if (condition) {              // code to be executed if condition is true            }        </code></pre>         <p><strong>Example:</strong></p>        <pre><code>            #include &lt;stdio.h&gt;            int main() {              int num = 10;              if (num > 0) {                printf(\"Number is positive\\\\n\");              }              return 0;            }        </code></pre>        <p><strong>Explanation:</strong> This code checks if the value of `num` is greater than 0. If it is, the message \"Number is positive\" is printed.</p>    </div>   <div class=\"example\">         <h3>The 'if-else' statement</h3>        <p>The 'if-else' statement executes one block of code if a condition is true and another block of code if the condition is false.</p>        <p><strong>Syntax:</strong></p>        <pre><code>            if (condition) {              // code to be executed if condition is true            } else {              // code to be executed if condition is false            }        </code></pre>       <p><strong>Example:</strong></p>        <pre><code>            #include &lt;stdio.h&gt;            int main() {              int num = -5;              if (num > 0) {                printf(\"Number is positive\\\\n\");              } else {                printf(\"Number is not positive\\\\n\");              }              return 0;            }        </code></pre>       <p><strong>Explanation:</strong> This code checks if the value of `num` is greater than 0. If it is, \"Number is positive\" is printed; otherwise, \"Number is not positive\" is printed.</p>    </div>   <div class=\"example\">         <h3>The 'if-else if-else' statement</h3>        <p>The 'if-else if-else' statement allows you to check multiple conditions in sequence. It executes the block of code associated with the first true condition.</p>        <p><strong>Syntax:</strong></p>         <pre><code>            if (condition1) {              // code to be executed if condition1 is true            } else if (condition2) {              // code to be executed if condition2 is true            } else {              // code to be executed if no conditions are true            }        </code></pre>          <p><strong>Example:</strong></p>           <pre><code>            #include &lt;stdio.h&gt;            int main() {              int score = 75;              if (score >= 90) {                printf(\"Grade: A\\\\n\");              } else if (score >= 80) {                printf(\"Grade: B\\\\n\");              } else if (score >= 70) {                printf(\"Grade: C\\\\n\");              } else {                 printf(\"Grade: D\\\\n\");              }                return 0;            }        </code></pre>         <p><strong>Explanation:</strong> This code checks the value of score and prints the corresponding grade, first it will check the first if condition if true then prints A otherwise checks the else if condition if true then prints B, otherwise checks next else if condition and so on until last else condition</p>    </div>    <div class=\"example\">        <h3>Logical operators</h3>        <p>Logical operators are used to combine or modify conditional statements.</p>        <p><strong>Common Operators:</strong></p>        <ul>          <li><strong>AND (&&):</strong> Returns true if both conditions are true.</li>          <li><strong>OR (||):</strong> Returns true if at least one condition is true.</li>          <li><strong>NOT (!):</strong> Returns true if the condition is false, and vice versa.</li>       </ul>        <p><strong>Example:</strong></p>         <pre><code>            #include &lt;stdio.h&gt;            int main() {              int age = 25;              int hasLicense = 1; // 1 for true, 0 for false              if (age >= 18 && hasLicense == 1) {                printf(\"Eligible to drive\\\\n\");              } else {                printf(\"Not eligible to drive\\\\n\");              }              return 0;            }        </code></pre>      <p><strong>Explanation:</strong> The code checks if the `age` is 18 or greater, and if `hasLicense` is true, only then \"Eligible to drive\" is printed.</p>    </div>    <div class=\"example\">        <h3>Nested if statements</h3>        <p>Nested if statements are if statements inside other if statements. They are used to create more complex conditional logic.</p>        <p><strong>Example:</strong></p>         <pre><code>            #include &lt;stdio.h&gt;            int main() {                int x = 10;                int y = 5;                if (x > 0) {                    if (y > 0) {                         printf(\"Both x and y are positive\\\\n\");                    } else {                        printf(\"x is positive but y is not\\\\n\");                    }                } else {                  printf(\"x is not positive\\\\n\");                }               return 0;            }        </code></pre>        <p><strong>Explanation:</strong> The outer `if` checks if `x` is positive. If true, the inner `if` checks if `y` is positive. The appropriate message is then printed.</p>    </div>    <div class=\"example\">        <h3>Conditional expressions</h3>       <p>Conditional expressions, also known as ternary operators, provide a concise way to express simple conditional logic. They are often used to assign a value based on a condition.</p>        <p><strong>Syntax:</strong></p>        <pre><code>            condition ? value_if_true : value_if_false;        </code></pre>         <p><strong>Example:</strong></p>         <pre><code>            #include &lt;stdio.h&gt;            int main() {                int num = -5;                 char *message = (num > 0) ? \"Positive\" : \"Non-positive\";                 printf(\"Number is: %s\\\\n\", message);                 return 0;            }         </code></pre>        <p><strong>Explanation:</strong> This code checks if num is greater than 0 using the ternary operator, if true then the string \"Positive\" is assigned to the string `message` otherwise \"Non-positive\" is assigned.         </p>    </div> ```"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n<style>\n    body {\n        font-family: sans-serif;\n        line-height: 1.6;\n        margin: 20px;\n        color: #333;\n        background-color: #f9f9f9;\n    }\n    h1,\n    h2 {\n        text-align: center;\n        color: #0056b3;\n        border-bottom: 2px solid #0056b3;\n        padding-bottom: 5px;\n        margin-bottom: 20px;\n    }\n    h2{\n        margin-top: 40px;\n    }\n    h3 {\n        color: #0056b3;\n        margin-bottom: 10px;\n    }\n    code {\n        background-color: #f0f0f0;\n        padding: 5px 10px;\n        border-radius: 5px;\n        display: block;\n        overflow-x: auto;\n        white-space: pre;\n        margin: 10px 0;\n    }\n    .example{\n        padding: 20px;\n        border-radius: 8px;\n        background-color: white;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        margin-bottom: 30px;\n    }\n    .example p{\n        margin-bottom: 10px;\n    }\n</style>\n\n<div class=\"exam-material\">\n\n    <h1>Chapter 1: Introduction to Python Programming</h1>\n    <hr>\n\n    <h2>1.1: Setting Up Your Python Environment</h2>\n        <div class=\"example\">\n            <h3>Topics Covered:</h3>\n            <ul>\n                <li>Downloading and Installing Python</li>\n                <li>Choosing a Code Editor (e.g., VS Code, PyCharm)</li>\n                <li>Understanding the Python Interpreter</li>\n                <li>Running Your First Python Program</li>\n            </ul>\n        </div>\n\n        <div class=\"example\">\n            <h3>Examples:</h3>\n\n            <p><b>Example 1: Running a simple \"Hello, World!\" program.</b></p>\n            <pre><code>\n                print(\"Hello, World!\")\n            </code></pre>\n\n            <p><b>Explanation:</b> This code snippet uses the built-in <code>print()</code> function to display the text \"Hello, World!\" on the console.</p>\n        </div>\n       <div class=\"example\">\n            <h3>Resource Links:</h3>\n            <ul>\n                <li><a href=\"https://www.python.org/downloads/\">Python Download Page</a></li>\n                <li><a href=\"https://code.visualstudio.com/\">VS Code Download Page</a></li>\n                 <li><a href=\"https://www.jetbrains.com/pycharm/\">PyCharm Download Page</a></li>\n            </ul>\n         </div>\n        <div class=\"example\">\n            <h3>Next Roadmap After Learning:</h3>\n            <p>After setting up your environment, you are ready to explore basic syntax and data types. Move to chapter 1.2 & 1.3 to learn basic python syntax and data types.</p>\n        </div>\n    \n    <hr>\n    <h2>1.2: Python Syntax and Basic Input/Output</h2>\n        <div class=\"example\">\n             <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Variables and Data Types (integers, floats, strings, booleans)</li>\n                    <li>Basic Operators (+, -, *, /, %, //, **)</li>\n                    <li>Comments and Indentation</li>\n                    <li>Inputting Data Using `input()`</li>\n                    <li>Outputting Data Using `print()`</li>\n                </ul>\n        </div>\n\n        <div class=\"example\">\n            <h3>Examples:</h3>\n\n            <p><b>Example 1: Variable Assignment and Basic Arithmetic Operations</b></p>\n            <pre><code>\n                age = 30\n                price = 19.99\n                name = \"Alice\"\n                is_student = False\n                sum_result = age + price\n                \n                print(sum_result) # Output will be 49.99\n                print(name) # Output will be \"Alice\"\n            </code></pre>\n            <p><b>Explanation:</b> This snippet demonstrates variable assignments, various data types, and basic arithmetic. It initializes variables with different types and perform an addition operation.</p>\n            <br>\n            \n            <p><b>Example 2: Input and Output</b></p>\n            <pre><code>\n                name = input(\"Enter your name: \")\n                print(\"Hello, \" + name + \"!\")\n                age = int(input(\"Enter your age: \"))\n                print(\"You are \" + str(age) + \" years old.\")\n            </code></pre>\n            <p><b>Explanation:</b>  Here, we use <code>input()</code> to get user input, and <code>print()</code> to display messages. The data input are always string type, we have to explicitly conver them to specific data types.</p>\n        </div>\n\n        <div class=\"example\">\n            <h3>Resource Links:</h3>\n            <ul>\n                <li><a href=\"https://docs.python.org/3/tutorial/introduction.html\">Python Tutorial</a></li>\n    \n            </ul>\n        </div>\n        <div class=\"example\">\n            <h3>Next Roadmap After Learning:</h3>\n            <p>With a handle on syntax and basic input/output, you're ready to explore control flow using conditionals and loops. Proceed to Chapter 2 to explore control flow.</p>\n         </div>\n    <hr>\n\n    <h2>1.3: Working with Strings</h2>\n        <div class=\"example\">\n             <h3>Topics Covered:</h3>\n                <ul>\n                    <li>String Literals</li>\n                    <li>String Concatenation and Repetition</li>\n                    <li>String Indexing and Slicing</li>\n                    <li>String Methods (e.g., `len()`, `upper()`, `lower()`, `strip()`, `split()`)</li>\n                    <li>String Formatting (f-strings, `format()`)</li>\n                </ul>\n        </div>\n        <div class=\"example\">\n            <h3>Examples:</h3>\n            \n            <p><b>Example 1: String Concatenation and Length</b></p>\n            <pre><code>\n                first_name = \"John\"\n                last_name = \"Doe\"\n                full_name = first_name + \" \" + last_name\n                length = len(full_name)\n                print(full_name) #Output will be \"John Doe\"\n                print(length) # Output will be 8\n            </code></pre>\n            <p><b>Explanation:</b> This snippet demonstrates string concatenation and the use of the `len()` function to find the length of the string.</p>\n            <br>\n\n            <p><b>Example 2: String Indexing and Slicing</b></p>\n            <pre><code>\n                message = \"Python is awesome\"\n                first_char = message[0]\n                last_char = message[-1]\n                sub_string = message[0:6]\n                print(first_char) #Output will be \"P\"\n                print(last_char) # Output will be \"e\"\n                print(sub_string) #Output will be \"Python\"\n            </code></pre>\n            <p><b>Explanation:</b> This example shows string indexing and how to slice strings to extract parts of them.</p>\n            <br>\n            <p><b>Example 3: String Methods and Formatting</b></p>\n            <pre><code>\n            text = \"   hello world   \"\n            text_upper = text.upper()\n            text_stripped = text.strip()\n            text_split = text_stripped.split()\n\n            name = \"Bob\"\n            age = 30\n            formatted_string = f\"Name: {name}, Age: {age}\"\n            print(text_upper) #Output will be \"   HELLO WORLD   \"\n            print(text_stripped) #Output will be \"hello world\"\n            print(text_split) #Output will be [\"hello\", \"world\"]\n            print(formatted_string) #Output will be \"Name: Bob, Age: 30\"\n            </code></pre>\n\n            <p><b>Explanation:</b> This example introduces common string methods, and demonstrates f-string formatting for creating formatted output.</p>\n        </div>\n\n        <div class=\"example\">\n            <h3>Resource Links:</h3>\n            <ul>\n                <li><a href=\"https://docs.python.org/3/library/string.html\">Python String Methods Documentation</a></li>\n            </ul>\n        </div>\n\n        <div class=\"example\">\n            <h3>Next Roadmap After Learning:</h3>\n            <p>You've mastered the basics of string manipulation. Next up, it's time to start using control structures, which help you control the flow of your programs, check out chapter 2.</p>\n        </div>\n\n    <hr>\n    <h1>Chapter 2: Control Flow</h1>\n    <hr>\n\n        <h2>2.1: Conditional Statements (if, elif, else)</h2>\n         <div class=\"example\">\n            <h3>Topics Covered:</h3>\n                <ul>\n                    <li>`if` statements</li>\n                    <li>`if-else` statements</li>\n                    <li>`if-elif-else` statements</li>\n                    <li>Nested `if` statements</li>\n                    <li>Comparison operators (==, !=, >, <, >=, <=)</li>\n                    <li>Logical operators (and, or, not)</li>\n                </ul>\n         </div>\n         <div class=\"example\">\n            <h3>Examples:</h3>\n\n            <p><b>Example 1: Basic if statement</b></p>\n                <pre><code>\n                    age = 20\n                    if age >= 18:\n                        print(\"You are an adult.\")\n                </code></pre>\n                <p><b>Explanation:</b> This snippet demonstrates a basic if condition that checks if the value of age is greater or equal to 18, if it is, it displays \"You are an adult.\"</p>\n                <br>\n            <p><b>Example 2: if-else statement</b></p>\n                <pre><code>\n                    number = 5\n                    if number % 2 == 0:\n                        print(\"The number is even.\")\n                    else:\n                        print(\"The number is odd.\")\n                </code></pre>\n                <p><b>Explanation:</b> This shows how if-else works to implement conditions that perform an alternate block of code when the original if condition is not satisfied.</p>\n                <br>\n\n            <p><b>Example 3: if-elif-else statement</b></p>\n                <pre><code>\n                    score = 85\n                    if score >= 90:\n                    print(\"A\")\n                    elif score >= 80:\n                    print(\"B\")\n                    elif score >= 70:\n                        print(\"C\")\n                    else:\n                    print(\"D\")\n                </code></pre>\n                <p><b>Explanation:</b> This example demonstrates how to use `elif` conditions to handle multiple conditions. Here based on the score the output can be A, B, C or D.</p>\n                <br>\n            <p><b>Example 4: Nested if statement</b></p>\n                <pre><code>\n                    x = 10\n                    if x > 5:\n                    print(\"x is greater than 5\")\n                    if x > 8:\n                    print(\"x is also greater than 8\")\n                </code></pre>\n                <p><b>Explanation:</b> This example demonstrates how nested if conditions work, the inner condition checks whether x is greater than 8 inside the outer condition which checks whether x is greater than 5.</p>\n                <br>\n             <p><b>Example 5: Using Logical Operators</b></p>\n                <pre><code>\n                    age = 25\n                    has_license = True\n                    if age >= 18 and has_license:\n                        print(\"You can drive\")\n\n                    if not(age > 100):\n                        print(\"You are probably a young person\")\n                </code></pre>\n                <p><b>Explanation:</b> This shows how to use the `and` and `not` logical operators to check multiple conditions.</p>\n                <br>\n         </div>\n            <div class=\"example\">\n                <h3>Resource Links:</h3>\n                <ul>\n                    <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html\">Python Control Flow Documentation</a></li>\n                </ul>\n             </div>\n             <div class=\"example\">\n                <h3>Next Roadmap After Learning:</h3>\n                <p>After mastering conditional statements, you can now use loops, which are the next logical step for implementing repetition in your programs, proceed to 2.2.</p>\n             </div>\n    <hr>\n        <h2>2.2: Loops (for and while)</h2>\n           <div class=\"example\">\n                <h3>Topics Covered:</h3>\n                    <ul>\n                    <li>`for` loops (iterating through sequences)</li>\n                    <li>`while` loops</li>\n                    <li>Loop Control Statements (`break`, `continue`)</li>\n                    <li>`else` clause with loops</li>\n                    <li>Nested Loops</li>\n                    </ul>\n           </div>\n            <div class=\"example\">\n                <h3>Examples:</h3>\n                    <p><b>Example 1: for loop with range()</b></p>\n                    <pre><code>\n                        for i in range(5):\n                            print(i) #Output will be 0,1,2,3,4\n                    </code></pre>\n                        <p><b>Explanation:</b> This demonstrates using `for` loop with the `range()` function to iterate over a sequence of numbers.</p>\n                    <br>\n                    <p><b>Example 2: for loop iterating over a list</b></p>\n                    <pre><code>\n                        colors = [\"red\", \"green\", \"blue\"]\n                        for color in colors:\n                            print(color) #Output will be red, green, blue each in a new line.\n                        </code></pre>\n                        <p><b>Explanation:</b> This demonstrates how to iterate over items in a list using a `for` loop.</p>\n                        <br>\n                    <p><b>Example 3: while loop</b></p>\n                    <pre><code>\n                        count = 0\n                        while count < 5:\n                        print(count)\n                        count += 1 #Output will be 0,1,2,3,4\n                    </code></pre>\n                        <p><b>Explanation:</b> This snippet shows a `while` loop that continues to execute as long as the condition `count < 5` is true.</p>\n                        <br>\n                    <p><b>Example 4: break and continue statement</b></p>\n                    <pre><code>\n                    for i in range(10):\n                        if i == 3:\n                        continue #skip printing i = 3\n                        if i == 7:\n                        break #exit the loop\n                        print(i)\n                    #Output will be 0,1,2,4,5,6\n                    </code></pre>\n                        <p><b>Explanation:</b> This example demonstrates how to use `break` to prematurely exit the loop and `continue` to skip the rest of the current loop's code.</p>\n                        <br>\n                <p><b>Example 5: else clause in loops</b></p>\n                    <pre><code>\n                        for i in range(5):\n                        print(i)\n                        else:\n                            print(\"loop finished\") #Output will be 0,1,2,3,4 and \"loop finished\"\n                    </code></pre>\n                        <p><b>Explanation:</b>  The `else` clause is executed only when the loop exits normally without encountering a `break` statement.</p>\n                        <br>\n                <p><b>Example 6: Nested Loops</b></p>\n                    <pre><code>\n                        for i in range(2):\n                            for j in range(3):\n                                print(i,j) # Output will be (0,0), (0,1), (0,2), (1,0), (1,1),(1,2)\n                    </code></pre>\n                        <p><b>Explanation:</b> This shows how to use loops within loops, known as nested loops, which can be used for working with multi dimensional data such as a matrix.</p>\n                        <br>\n            </div>\n            <div class=\"example\">\n                <h3>Resource Links:</h3>\n                    <ul>\n                    <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html#for-statements\">Python For Loops Documentation</a></li>\n                        <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html#while-statements\">Python While Loops Documentation</a></li>\n                    </ul>\n            </div>\n            <div class=\"example\">\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>Now that you can control the flow of your programs, the next step is to learn how to use functions which encapsulate reusable parts of your program, proceed to chapter 3.</p>\n            </div>\n     <hr>\n     <h1>Chapter 3: Functions and Modules</h1>\n    <hr>\n    <h2>3.1: Defining and Calling Functions</h2>\n        <div class=\"example\">\n            <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Function definitions using `def`</li>\n                    <li>Function parameters (positional, keyword, default)</li>\n                    <li>Returning values from functions using `return`</li>\n                    <li>Function Scope (local and global variables)</li>\n                    <li>Docstrings and Function Documentation</li>\n                </ul>\n        </div>\n           <div class=\"example\">\n            <h3>Examples:</h3>\n\n            <p><b>Example 1: Simple function with parameters and return values</b></p>\n                <pre><code>\n                    def add(x,y):\n                        sum_result = x + y\n                        return sum_result\n                    result = add(5,3)\n                    print(result) # Output will be 8\n                </code></pre>\n                <p><b>Explanation:</b> This example defines a function `add` that takes two arguments and returns their sum.</p>\n                <br>\n            <p><b>Example 2: Keyword and default arguments</b></p>\n                <pre><code>\n                    def greet(name, message=\"Hello\"):\n                        print(message + \", \" + name + \"!\")\n                    greet(\"Alice\") # Output will be \"Hello, Alice!\"\n                    greet(\"Bob\", \"Good Morning\") # Output will be \"Good Morning, Bob!\"\n                </code></pre>\n                <p><b>Explanation:</b>  This example demonstrates how to use keyword arguments and default parameter values.</p>\n                <br>\n            <p><b>Example 3: Variable Scope</b></p>\n                <pre><code>\n                    global_var = 10\n                    def function_scope():\n                        local_var = 5\n                        print(\"local_var in scope\", local_var)\n                        print(\"global_var in scope\", global_var)\n                    function_scope()\n                    print(\"global_var outside scope\", global_var)\n\n                    # This will generate a NameError, since the local_var is not visible outside function\n                    # print(\"local_var outside scope\", local_var)\n                </code></pre>\n                <p><b>Explanation:</b> This example shows the scope of local and global variables.</p>\n                <br>\n            <p><b>Example 4: Function Docstring</b></p>\n                <pre><code>\n                    def area_of_rectangle(length, width):\n                    \"\"\"\n                        Calculates the area of rectangle.\n                        Args:\n                                length: Length of the rectangle.\n                                width: Width of the rectangle.\n                        Returns:\n                            The area of the rectangle.\n                    \"\"\"\n                    area = length * width\n                    return area\n                    help(area_of_rectangle) # This will print the function description or docstring.\n                    \n                </code></pre>\n                <p><b>Explanation:</b> This shows how to include a docstring for function documentation, can be useful to understand what a function does and how to use it without having to look at implementation.</p>\n                <br>\n           </div>\n            <div class=\"example\">\n                <h3>Resource Links:</h3>\n                    <ul>\n                        <li><a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">Python Function Definition Documentation</a></li>\n                    </ul>\n            </div>\n            <div class=\"example\">\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>Now that you are able to define and use functions, you can start using modules which can group functions and other data structures, proceed to 3.2.</p>\n            </div>\n    <hr>\n    <h2>3.2: Working with Modules and Packages</h2>\n          <div class=\"example\">\n            <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Importing modules (using `import`, `from ... import`)</li>\n                    <li>Built-in modules (e.g., `math`, `random`, `datetime`)</li>\n                    <li>Creating and Using custom Modules</li>\n                    <li>Understanding Packages and Sub-packages</li>\n                    <li>Installing and Using external packages (e.g., using pip)</li>\n                </ul>\n           </div>\n           <div class=\"example\">\n            <h3>Examples:</h3>\n             <p><b>Example 1: Importing the math module</b></p>\n                <pre><code>\n                    import math\n                    sqrt_val = math.sqrt(25)\n                    print(sqrt_val) # Output will be 5\n                    pi_val = math.pi\n                    print(pi_val) # Output will be 3.141592653589793\n                </code></pre>\n                <p><b>Explanation:</b> This demonstrates importing and using the functions in built-in math module.</p>\n                <br>\n\n             <p><b>Example 2: Importing a specific item from a module</b></p>\n                <pre><code>\n                    from random import randint\n                    random_number = randint(1,10) # generate random integers between 1 and 10\n                    print(random_number)\n                </code></pre>\n                 <p><b>Explanation:</b> This shows how to import individual items from a module using from import.</p>\n                 <br>\n              <p><b>Example 3: Creating custom module</b></p>\n                <pre><code>\n                #Create a file named my_module.py with this content\n                    def add(x,y):\n                        return x+y\n                 # In another python file import the module to use\n                 # import my_module\n                 # result = my_module.add(5,3)\n                 # print(result) # Output will be 8\n                 </code></pre>\n                <p><b>Explanation:</b> This example shows how to create custom modules by creating a new python file (.py) and importing the functionality.</p>\n                 <br>\n            <p><b>Example 4: Package import</b></p>\n                <pre><code>\n                 # create a directory named my_package, inside of my_package create an empty file named __init__.py and a file named my_module.py with below content\n                 #Inside my_module.py\n                 def add(x,y):\n                      return x+y\n                  # In another python file import the module to use\n                  # from my_package import my_module\n                  # result = my_module.add(5,3)\n                  # print(result) # Output will be 8\n                </code></pre>\n                <p><b>Explanation:</b> This example demonstrates how to organize modules into packages.</p>\n                 <br>\n             <p><b>Example 5: Installing external package using pip</b></p>\n                <pre><code>\n                # To install a package use pip:\n                # pip install requests\n                # In a python file\n                # import requests\n                # response = requests.get('https://www.google.com')\n                # print(response)\n                </code></pre>\n                <p><b>Explanation:</b> This example shows how to install an external package, in this case `requests` which can be used to retrieve contents from web pages. Before running the code make sure to install the module using `pip install requests`</p>\n                 <br>\n           </div>\n            <div class=\"example\">\n                <h3>Resource Links:</h3>\n                    <ul>\n                        <li><a href=\"https://docs.python.org/3/tutorial/modules.html\">Python Modules Documentation</a></li>\n                        <li><a href=\"https://pip.pypa.io/en/stable/\">pip Documentation</a></li>\n                    </ul>\n            </div>\n            <div class=\"example\">\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>You have now mastered the basics of functions and modules. The next step is to learn how to use data structures, which can help manage and organize different types of data, continue to chapter 4.</p>\n            </div>\n        <hr>\n    <h1>Chapter 4: Data Structures</h1>\n    <hr>\n    <h2>4.1: Lists</h2>\n        <div class=\"example\">\n            <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Creating and accessing lists</li>\n                    <li>List operations (appending, inserting, removing)</li>\n                    <li>List slicing</li>\n                    <li>List methods (e.g., `append()`, `insert()`, `remove()`, `pop()`, `sort()`)</li>\n                    <li>List comprehensions</li>\n                    <li>Nested lists</li>\n                 </ul>\n        </div>\n         <div class=\"example\">\n             <h3>Examples:</h3>\n                 <p><b>Example 1: Creating and accessing Lists</b></p>\n                   <pre><code>\n                   my_list = [1,2,3,\"apple\", \"banana\"]\n                   first_item = my_list[0]\n                   last_item = my_list[-1]\n                   print(first_item) # Output will be 1\n                   print(last_item) # Output will be banana\n                   </code></pre>\n                     <p><b>Explanation:</b> This demonstrates how to create a list and access items using their indices.</p>\n                     <br>\n\n                  <p><b>Example 2: List Operations (append, insert, remove)</b></p>\n                    <pre><code>\n                    my_list = [1,2,3]\n                    my_list.append(4)\n                    print(my_list) #Output will be [1, 2, 3, 4]\n                    my_list.insert(1,5)\n                    print(my_list) # Output will be [1, 5, 2, 3, 4]\n                    my_list.remove(3)\n                    print(my_list) # Output will be [1, 5, 2, 4]\n                     </code></pre>\n                     <p><b>Explanation:</b> This shows list operations like appending, inserting, and removing items.</p>\n                      <br>\n                 <p><b>Example 3: List Slicing</b></p>\n                    <pre><code>\n                      my_list = [10,20,30,40,50]\n                      sliced_list = my_list[1:4]\n                      print(sliced_list) # Output will be [20,30,40]\n                     </code></pre>\n                    <p><b>Explanation:</b> This demonstrates how to slice a list to extract a subset of items.</p>\n                     <br>\n\n                  <p><b>Example 4: List methods (pop and sort)</b></p>\n                   <pre><code>\n                    my_list = [5,2,8,1,9]\n                    popped_element = my_list.pop()\n                    print(\"Popped Element:\", popped_element) # Output will be 9\n                    my_list.sort()\n                    print(\"Sorted List:\", my_list) # Output will be [1,2,5,8]\n                    </code></pre>\n                    <p><b>Explanation:</b> This snippet demonstrates list methods such as pop to remove last element and sort to sort a list in ascending order</p>\n                     <br>\n                   <p><b>Example 5: List comprehensions</b></p>\n                    <pre><code>\n                       numbers = [1,2,3,4,5]\n                       squared_numbers = [x**2 for x in numbers]\n                       even_numbers = [x for x in numbers if x % 2 == 0]\n\n                       print(\"Squared Numbers:\", squared_numbers) #Output will be [1, 4, 9, 16, 25]\n                       print(\"Even Numbers:\", even_numbers) #Output will be [2,4]\n                     </code></pre>\n                    <p><b>Explanation:</b> This shows how to create lists using list comprehension to perform operations and condition.</p>\n                     <br>\n                  <p><b>Example 6: Nested Lists</b></p>\n                    <pre><code>\n                       matrix = [[1,2,3], [4,5,6], [7,8,9]]\n                       print(matrix[0][1]) # Output will be 2\n                    </code></pre>\n                    <p><b>Explanation:</b> This shows how to create nested lists and access items, it is used for representing multi dimensional data such as matrix.</p>\n                     <br>\n          </div>\n            <div class=\"example\">\n                <h3>Resource Links:</h3>\n                    <ul>\n                       <li><a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\">Python List Documentation</a></li>\n                   </ul>\n            </div>\n            <div class=\"example\">\n                <h3>Next Roadmap After Learning:</h3>\n                    <p>With the understanding of lists, you're now ready to explore another fundamental data structure, which is tuples, proceed to 4.2.</p>\n            </div>\n     <hr>\n    <h2>4.2: Tuples</h2>\n         <div class=\"example\">\n            <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Creating tuples</li>\n                    <li>Tuple packing and unpacking</li>\n                    <li>Immutability of tuples</li>\n                    <li>When to use tuples vs. lists</li>\n                </ul>\n         </div>\n          <div class=\"example\">\n              <h3>Examples:</h3>\n              <p><b>Example 1: Creating and Accessing Tuples</b></p>\n                 <pre><code>\n                   my_tuple = (1,2,3, \"apple\", \"banana\")\n                   first_item = my_tuple[0]\n                   last_item = my_tuple[-1]\n                   print(first_item) # Output will be 1\n                   print(last_item) # Output will be \"banana\"\n                 </code></pre>\n                  <p><b>Explanation:</b> This shows how to create a tuple and access individual elements using their indices.</p>\n                 <br>\n              <p><b>Example 2: Tuple packing and unpacking</b></p>\n                <pre><code>\n                  my_tuple = 1,2,3  #tuple packing\n                  x,y,z = my_tuple  # tuple unpacking\n                  print(\"x:\",x) #Output will be x: 1\n                  print(\"y:\",y) #Output will be y: 2\n                  print(\"z:\",z) #Output will be z: 3\n                </code></pre>\n                <p><b>Explanation:</b> This demonstrates tuple packing and unpacking, tuple packing is creating a tuple without paranthesis while tuple unpacking is assignment of values to variables.</p>\n                 <br>\n              <p><b>Example 3: Immutability of tuples</b></p>\n                <pre><code>\n                  my_tuple = (1,2,3)\n                  #my_tuple[0] = 5 # This will generate an error as tuples are immutable\n                  print(my_tuple) #Output will be (1,2,3)\n                </code></pre>\n                <p><b>Explanation:</b> This shows that tuples are immutable and their values can't be changed after creation.</p>\n                 <br>\n             <p><b>Example 4: Use case to return multiple values</b></p>\n                <pre><code>\n                   def get_coordinates():\n                       x = 10\n                       y = 20\n                       return x,y  #returns a tuple\n                   coordinate_tuple = get_coordinates()\n                   print(coordinate_tuple)  # Output will be (10,20)\n                </code></pre>\n                <p><b>Explanation:</b> This example shows a typical use case of tuple when a function returns multiple values.</p>\n                 <br>\n           </div>\n\n                <div class=\"example\">\n                   <h3>Resource Links:</h3>\n                       <ul>\n                         <li><a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">Python Tuples Documentation</a></li>\n                       </ul>\n                </div>\n                <div class=\"example\">\n                    <h3>Next Roadmap After Learning:</h3>\n                        <p>Now that you are familiar with immutable tuples, you're ready to explore dictionaries, which is another fundamental data structure that can help store key value pairs, proceed to 4.3.</p>\n                </div>\n     <hr>\n   <h2>4.3: Dictionaries</h2>\n          <div class=\"example\">\n              <h3>Topics Covered:</h3>\n                <ul>\n                    <li>Creating and accessing dictionaries</li>\n                    <li>Dictionary operations (adding, updating, removing)</li>\n                    <li>Dictionary methods (e.g., `keys()`, `values()`, `items()`, `get()`)</li>\n                    <li>Dictionary comprehensions</li>\n                    <li>When to use dictionaries</li>\n                 </ul>\n          </div>\n           <div class=\"example\">\n            <h3>Examples:</h3>\n              <p><b>Example 1: Creating and Accessing Dictionaries</b></p>\n                 <pre><code>\n                    my_dict = {\"name\": \"John\", \"age\":30, \"city\":\"New York\"}\n                    name = my_dict[\"name\"]\n                    age = my_dict.get(\"age\")\n                    print(name) # Output will be \"John\"\n                    print(age) #Output will be 30\n                 </code></pre>\n                  <p><b>Explanation:</b> This example shows how to create a dictionary and access items using keys.</p>\n                  <br>\n              <p><b>Example 2: Dictionary Operations (Add, Update, Remove)</b></p>\n                <pre><code>\n                    my_dict = {\"name\": \"John\", \"age\":30}\n                    my_dict[\"city\"] = \"New York\" #add new item\n                    my_dict[\"age\"] = 31  # Update existing key\n                    del my_dict[\"name\"] #Remove item\n                    print(my_dict) # Output will be {'age': 31, 'city': 'New York'}\n                  </code></pre>\n                  <p><b>Explanation:</b> This demonstrates how to add, update and remove items from a dictionary using keys.</p>\n                   <br>\n              <p><b>Example 3: Dictionary Methods (keys, values, items)</b></p>\n                <pre><code>\n                    my_dict = {\"name\": \"John\", \"age\":30, \"city\":\"New York\"}\n                    keys = my_dict.keys()\n                    values = my_dict.values()\n                    items = my_dict.items()\n                    print(\"keys:\",keys) # Output will be dict_keys(['name', 'age', 'city'])\n                    print(\"values:\",values) # Output will be dict_values(['John', 30, 'New York'])\n                    print(\"items:\",items) # Output will be dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\n                  </code></pre>\n                <p><b>Explanation:</b> This example shows how to extract keys, values, and items of a dictionary as list of keys, values and tuples respectively.</p>\n                  <br>\n             <p><b>Example 4: Dictionary Comprehension</b></p>\n                <pre><code>\n                   numbers = [1,2,3,4,5]\n                   squared_dict = {num:num**2 for num in numbers}\n                   print(\"Squared Dictionary:\", squared_dict) # Output will be {1: 1, 2: 4, 3: 9, 4: 16, 5"},
          ],
        },
      ],
    });


    export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the flashcard on topic : Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the basic building block of a Flutter UI. Everything in Flutter is a widget, from buttons and text to layouts and entire screens.\"\n  },\n  {\n      \"front\": \"What's the difference between StatelessWidget and StatefulWidget?\",\n      \"back\": \"StatelessWidgets don't change over time; their UI is immutable. StatefulWidgets maintain a state that can change, leading to UI updates.\"\n   },\n   {\n    \"front\": \"Name 3 common layout widgets in Flutter.\",\n    \"back\": \"Container, Row, Column.\"\n  },\n  {\n    \"front\": \"What does 'BuildContext' represent?\",\n     \"back\": \"BuildContext is a handle to the location of a widget in the widget tree. It's needed for certain actions like navigation and accessing theme data.\"\n  },\n {\n   \"front\": \"What is the purpose of 'MaterialApp' widget?\",\n    \"back\":\"MaterialApp is a fundamental widget that configures the root of your Flutter app. It sets up the Material Design theme, navigation, and more.\"\n },\n {\n    \"front\": \"What does the 'Scaffold' widget do?\",\n    \"back\": \"The 'Scaffold' widget implements the basic visual layout structure for a Material Design app, including the app bar, body, and bottom navigation bar.\"\n  },\n  {\n    \"front\": \"How do you add padding around a widget?\",\n    \"back\": \"Use the 'Padding' widget, wrapping your desired widget and specifying the padding values.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Use `Navigator.push(context, MaterialPageRoute(builder: (context) => YourNewScreen()));`\"\n  },\n    {\n    \"front\": \"What is 'Navigator.pushReplacement' used for?\",\n    \"back\": \"It replaces the current screen on the navigation stack with the new screen, preventing the user from returning to the previous one with the back button.\"\n  },\n  {\n    \"front\": \"How to pass data to a new screen during navigation?\",\n    \"back\": \"Pass data as an argument to the constructor of the new screen class and access it in the build method of the new screen. You can also use named routes to pass data.\"\n   },\n {\n    \"front\": \"What is a 'Route' in Flutter?\",\n    \"back\":\"A Route represents a screen or a part of the app that is part of the navigation flow.\"\n },\n{\n    \"front\":\"What are named routes?\",\n     \"back\":\"Named routes allow you to define your routes with names which is more readable and easy to manage rather than using anonymous routes.\"\n  },\n    {\n    \"front\": \"How do you use 'Center' widget?\",\n    \"back\": \"The 'Center' widget centers its child widget both horizontally and vertically within its parent container.\"\n  },\n  {\n    \"front\": \"What is 'main.dart' in Flutter?\",\n    \"back\": \"'main.dart' is the entry point of your Flutter application. It usually contains the 'main()' function that runs your application\"\n  },\n  {\n   \"front\":\"What is 'pubspec.yaml' file in Flutter?\",\n   \"back\": \"The 'pubspec.yaml' file is a configuration file used to manage a Flutter project's dependencies, assets, and other project settings.\"\n  }\n]\n```\n"},
          ],
        },
      ],
    });
  

    export const GenerateQuizAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the quiz on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation in\nJSON format with explanation for correct answer,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI & Navigation Quiz\",\n  \"questions\": [\n    {\n      \"questionNumber\": 1,\n      \"question\": \"Which widget is the foundation of most user interfaces in Flutter?\",\n      \"options\": [\n        \"Text\",\n        \"Container\",\n        \"Widget\",\n        \"Scaffold\"\n      ],\n      \"correctAnswer\": \"Widget\",\n      \"explanation\": \"While Text, Container and Scaffold are important widgets, 'Widget' is the most fundamental class in Flutter's UI structure. Everything is a widget in Flutter, it's the base building block.\"\n    },\n     {\n      \"questionNumber\": 2,\n      \"question\": \"Which widget is typically used to create a basic visual structure with an AppBar and body?\",\n      \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Container\",\n        \"Scaffold\"\n      ],\n      \"correctAnswer\": \"Scaffold\",\n      \"explanation\": \"Scaffold provides the fundamental visual layout structure for most apps, including an AppBar and a body area, handling things like displaying a SnackBar or BottomSheet.\"\n    },\n    {\n      \"questionNumber\": 3,\n      \"question\": \"Which widget is used to arrange its children in a single column?\",\n      \"options\": [\n         \"Row\",\n         \"Column\",\n         \"Stack\",\n         \"Listview\"\n       ],\n       \"correctAnswer\": \"Column\",\n       \"explanation\": \"The 'Column' widget will place its child widgets one below the other vertically.\"\n     },\n     {\n      \"questionNumber\": 4,\n       \"question\": \"Which property is used to change the color of a Container widget?\",\n       \"options\": [\n          \"background\",\n          \"color\",\n          \"backgroundColor\",\n          \"fillColor\"\n        ],\n        \"correctAnswer\": \"color\",\n        \"explanation\": \"The 'color' property is used to set the background color of a Container widget.\"\n    },\n     {\n       \"questionNumber\": 5,\n       \"question\": \"What is the purpose of the 'setState' method in Flutter?\",\n        \"options\": [\n         \"To update the application's global state\",\n         \"To rebuild a widget's user interface\",\n          \"To change the layout of widgets\",\n          \"To start a new screen\"\n        ],\n        \"correctAnswer\": \"To rebuild a widget's user interface\",\n        \"explanation\": \"'setState' is used within State classes to notify Flutter that the internal state of the widget has changed, causing the framework to rebuild the UI with the new data.\"\n      },\n       {\n        \"questionNumber\": 6,\n        \"question\": \"Which widget is used for displaying scrollable content in Flutter?\",\n        \"options\": [\n           \"Container\",\n           \"Column\",\n           \"Row\",\n           \"ListView\"\n          ],\n          \"correctAnswer\": \"ListView\",\n          \"explanation\": \"The 'ListView' widget is specifically designed to display a list of items that can be scrolled.\"\n        },\n    {\n      \"questionNumber\": 7,\n      \"question\": \"Which widget is used to manage app navigation and screen transitions in Flutter?\",\n      \"options\": [\n        \"TextButton\",\n        \"Navigator\",\n         \"Stack\",\n        \"FloatingActionButton\"\n      ],\n      \"correctAnswer\": \"Navigator\",\n      \"explanation\": \"The 'Navigator' widget is the core component that manages the app's navigation stack, enabling screen transitions (push, pop, etc.).\"\n    },\n     {\n        \"questionNumber\": 8,\n        \"question\": \"What is the 'MaterialApp' widget primarily used for?\",\n        \"options\": [\n          \"To define the application's state\",\n          \"To define the application's visual structure\",\n          \"To define the application's network connection\",\n          \"To define a custom widget\"\n        ],\n        \"correctAnswer\": \"To define the application's visual structure\",\n        \"explanation\": \"The 'MaterialApp' widget sets up the overall structure of the application with Material Design visual elements, routing, theming etc.\"\n      },\n      {\n        \"questionNumber\": 9,\n        \"question\": \"How to define routes in Flutter?\",\n         \"options\": [\n           \"Using a Route widget\",\n            \"Using a list of screen widgets\",\n           \"Using 'routes' property in MaterialApp\",\n           \"Using setState\"\n          ],\n          \"correctAnswer\": \"Using 'routes' property in MaterialApp\",\n          \"explanation\": \"The 'routes' property within MaterialApp is where you typically define the available routes in your Flutter application using name-route mapping.\"\n       },\n      {\n        \"questionNumber\": 10,\n        \"question\": \"What does 'BuildContext' represent in Flutter?\",\n        \"options\": [\n          \"The state of the current widget\",\n          \"The location of the widget in the tree\",\n          \"The application's global data\",\n          \"The data passed between screens\"\n        ],\n       \"correctAnswer\": \"The location of the widget in the tree\",\n        \"explanation\": \"'BuildContext' is an object that provides the location of a widget in the widget tree and provides access to other resources and services.\"\n     },\n      {\n       \"questionNumber\": 11,\n       \"question\": \"Which method do we use to navigate to a new route and remove the current route in the stack?\",\n        \"options\": [\n         \"Navigator.pushNamed()\",\n          \"Navigator.pop()\",\n          \"Navigator.pushReplacementNamed()\",\n          \"Navigator.popUntil()\"\n         ],\n       \"correctAnswer\": \"Navigator.pushReplacementNamed()\",\n        \"explanation\": \"Navigator.pushReplacementNamed replaces the current screen with the new screen which removes the previous screen from the navigation stack and thus prevents the user from going back using the back button.\"\n      },\n      {\n      \"questionNumber\": 12,\n      \"question\": \"What is 'Hot Reload' in Flutter?\",\n       \"options\": [\n          \"A way to restart the application from scratch\",\n          \"A technique to deploy app in the app stores\",\n          \"A tool to quickly apply code changes and see the changes in the running app\",\n          \"A technique to handle exceptions\"\n       ],\n      \"correctAnswer\": \"A tool to quickly apply code changes and see the changes in the running app\",\n      \"explanation\": \"Hot Reload is one of the most powerful features of flutter. It allows to see the code changes in the running app instantly.\"\n      },\n     {\n        \"questionNumber\": 13,\n        \"question\": \"What is a 'Key' in Flutter?\",\n         \"options\": [\n          \"A way to encrypt sensitive data\",\n           \"A unique identifier for widgets\",\n            \"A styling attribute\",\n          \"A method to perform background task\"\n          ],\n        \"correctAnswer\": \"A unique identifier for widgets\",\n        \"explanation\": \"Keys are used to keep track of the widgets in the tree, particularly when dealing with list items, stateful widgets and animations.\"\n      },\n        {\n        \"questionNumber\": 14,\n        \"question\": \"What are the two main types of widgets in Flutter?\",\n        \"options\": [\n          \"Text and Image Widgets\",\n          \"Stateless and Stateful Widgets\",\n          \"Layout and Button Widgets\",\n          \"Basic and Complex Widgets\"\n          ],\n        \"correctAnswer\": \"Stateless and Stateful Widgets\",\n        \"explanation\": \"Stateless widgets do not change their state while stateful widgets rebuild their UI as their state changes.\"\n       },\n      {\n        \"questionNumber\": 15,\n        \"question\": \"What is the purpose of pubspec.yaml?\",\n        \"options\": [\n            \"To define routes in app\",\n            \"To manage dependencies and metadata of the project\",\n            \"To manage state\",\n             \"To change UI of the app\"\n         ],\n        \"correctAnswer\": \"To manage dependencies and metadata of the project\",\n        \"explanation\":\"The pubspec.yaml file is crucial for your Flutter project as it lists the packages/dependencies your app relies on, along with other meta information.\"\n      }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });


 export  const GenerateQAAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Question And Answers on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation in\nJSON format with front back content,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"question\": \"What is Flutter?\",\n    \"answer\": \"Flutter is an open-source UI software development kit created by Google. It is used to develop cross-platform applications for Android, iOS, Linux, macOS, Windows, and the web from a single codebase.\",\n      \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is Flutter?\"\n  },\n  {\n    \"question\": \"What language is Flutter primarily written in?\",\n    \"answer\": \"Flutter is primarily written in the Dart programming language.\",\n     \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What language is Flutter primarily written in?\"\n  },\n  {\n    \"question\": \"What is a 'Widget' in Flutter?\",\n    \"answer\": \"In Flutter, everything is a widget. A widget is a structural component that represents an element in the user interface, like a button, text field, or image.\",\n    \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is a 'Widget' in Flutter?\"\n  },\n  {\n    \"question\": \"What is the difference between 'StatelessWidget' and 'StatefulWidget'?\",\n    \"answer\": \"A 'StatelessWidget' is immutable and does not change once created. A 'StatefulWidget' can change over time due to user interaction or data updates.\",\n     \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is the difference between 'StatelessWidget' and 'StatefulWidget'?\"\n  },\n    {\n    \"question\": \"Name three commonly used layout widgets in Flutter.\",\n    \"answer\": \"Three commonly used layout widgets are: Container, Row, Column.\",\n      \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"Name three commonly used layout widgets in Flutter.\"\n  },\n  {\n      \"question\": \"What is the purpose of the `build()` method in a Flutter widget?\",\n      \"answer\": \"The `build()` method describes how a widget should be rendered in the UI. It returns a widget tree that Flutter uses to display the UI.\",\n      \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"What is the purpose of the `build()` method in a Flutter widget?\"\n  },\n  {\n    \"question\":\"How do you handle user input in Flutter?\",\n    \"answer\":\"User input can be handled using widgets like `TextField`, `ElevatedButton` along with callback functions like `onChanged`, `onPressed`.\",\n     \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"How do you handle user input in Flutter?\"\n  },\n   {\n    \"question\": \"What is the purpose of the `setState()` method in a StatefulWidget?\",\n    \"answer\": \"The `setState()` method informs Flutter that the state of a `StatefulWidget` has changed, causing the UI to be rebuilt to reflect those changes.\",\n     \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"What is the purpose of the `setState()` method in a StatefulWidget?\"\n  },\n {\n    \"question\": \"What is the main purpose of using `Navigator` in Flutter?\",\n    \"answer\": \"The `Navigator` widget is used for managing app navigation, such as pushing new screens onto the stack and popping back to previous ones.\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"What is the main purpose of using `Navigator` in Flutter?\"\n  },\n  {\n    \"question\": \"What are the two primary ways to navigate in Flutter using the Navigator?\",\n    \"answer\": \"The two primary ways are: `Navigator.push` for moving to a new screen and `Navigator.pop` for returning to the previous one.\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"What are the two primary ways to navigate in Flutter using the Navigator?\"\n  },\n    {\n      \"question\": \"What is a 'Route' in Flutter navigation?\",\n      \"answer\":\"A Route in Flutter navigation is an abstraction for a screen or page. It encapsulates the destination (Widget) and transition.\",\n      \"front\": \"Basic App Navigation\",\n       \"back\": \"What is a 'Route' in Flutter navigation?\"\n    },\n  {\n    \"question\": \"How do you pass data when navigating to a new screen?\",\n    \"answer\": \"Data can be passed when navigating using arguments in `Navigator.push` (e.g., as part of a named route or using a constructor).\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"How do you pass data when navigating to a new screen?\"\n  },\n  {\n    \"question\": \"What are named routes and how are they useful?\",\n    \"answer\": \"Named routes associate string names with routes. This allows you to navigate between pages by name which makes code more maintainable and easier to read.\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"What are named routes and how are they useful?\"\n  },\n {\n      \"question\":\"What is the difference between `push` and `pushReplacementNamed`?\",\n      \"answer\":\"`push` adds a new page on top of current one, while `pushReplacementNamed` replaces current page with new one.\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"What is the difference between `push` and `pushReplacementNamed`?\"\n  },\n{\n \"question\": \"How to implement basic navigation with MaterialPageRoute?\",\n \"answer\":\"`MaterialPageRoute` is used with `Navigator.push` and `Navigator.pushNamed` to provide material design transitions between screens. Example: `Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()));`\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"How to implement basic navigation with MaterialPageRoute?\"\n}\n]\n```\n"},
          ],
        },
      ],
    });
  
  