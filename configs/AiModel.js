const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const generationConfig2 = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const courseOutlineAIModel = model.startChat({
        generationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "Generate a study material for\npython for exam and level of difficulty\nwill be easy with summary of course,course Title,\n1 List of Chapters along with summary,chapter emoji\nfor each chapter, Topic list in each,All chapter in\nJSON format"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "Okay, here's a JSON formatted study material for a beginner-level Python exam, designed to be easy and with the requested components:\n\n```json\n{\n  \"courseTitle\": \"Python Fundamentals for Beginners\",\n  \"courseSummary\": \"This course provides a gentle introduction to the Python programming language. It covers basic syntax, data types, control flow, and simple functions, equipping you with the foundational knowledge to write basic Python programs.  It aims to build a solid understanding before moving onto more advanced topics.\",\n  \"levelOfDifficulty\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Introduction to Python\",\n      \"chapterEmoji\": \"👋\",\n      \"summary\": \"This chapter introduces the Python language, its history, why it's popular, and how to set up your development environment. You will also write and run your first basic Python code.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why Python?\",\n        \"Setting up Python Environment\",\n        \"Running your first Python program (Hello World)\",\n          \"Basic Syntax (comments)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterTitle\": \"Data Types and Variables\",\n       \"chapterEmoji\": \"🧮\",\n      \"summary\": \"This chapter explains the core data types in Python (integers, floats, strings, and booleans) and how to declare and use variables to store them. It introduces the concept of operators\",\n      \"topics\": [\n        \"Integers (int)\",\n        \"Floating-point numbers (float)\",\n        \"Strings (str)\",\n        \"Booleans (bool)\",\n        \"Variables: Declaration and Assignment\",\n        \"Basic arithmetic operators (+, -, *, /, //, %, **)\",\n           \"Comparison Operators (==, !=, >, <, >=, <=)\"\n\n      ]\n    },\n       {\n      \"chapterNumber\": 3,\n      \"chapterTitle\": \"Working with Strings\",\n       \"chapterEmoji\": \"💬\",\n      \"summary\": \"This chapter focuses on Strings in Python. It explores how to create, manipulate and format strings. Learn about common methods available for strings.\",\n      \"topics\": [\n        \"String creation\",\n        \"String Concatenation and Repetition\",\n        \"String Indexing and Slicing\",\n         \"String length\",\n        \"Common string methods (lower(), upper(), strip(), replace(), find())\",\n        \"String formatting (f-strings)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 4,\n      \"chapterTitle\": \"Control Flow: Conditional Statements\",\n       \"chapterEmoji\": \"🚦\",\n      \"summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow your code to make decisions based on conditions. Learn to write programs that behave differently.\",\n      \"topics\": [\n        \"The `if` statement\",\n        \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements\",\n        \"Logical operators (`and`, `or`, `not`)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 5,\n      \"chapterTitle\": \"Control Flow: Loops\",\n       \"chapterEmoji\": \"🔄\",\n      \"summary\": \"This chapter covers `for` and `while` loops, enabling you to repeat code blocks efficiently. Understand how to iterate through lists and perform repetitive tasks.\",\n      \"topics\": [\n        \"The `for` loop\",\n         \"Iterating through lists\",\n         \"The `while` loop\",\n         \"Break and continue statements\"\n      ]\n    },\n    {\n      \"chapterNumber\": 6,\n      \"chapterTitle\": \"Lists in Python\",\n       \"chapterEmoji\": \"🧾\",\n      \"summary\": \"This chapter introduces Python lists, which are used to store collections of items. You'll learn about creating, modifying, and iterating through lists.\",\n      \"topics\": [\n          \"Creating lists\",\n          \"Accessing list elements\",\n          \"Modifying list elements\",\n          \"List methods (append(), insert(), remove(), pop(), len())\",\n          \"Iterating through lists with loops\"\n       ]\n    },\n     {\n      \"chapterNumber\": 7,\n      \"chapterTitle\": \"Introduction to Functions\",\n      \"chapterEmoji\": \"⚙️\",\n      \"summary\": \"This chapter introduces functions, their purpose, and syntax. Learn how to define and call basic functions to reuse code.\",\n       \"topics\": [\n        \"Defining a function using def\",\n         \"Calling a function\",\n         \"Function parameters and arguments\",\n         \"Returning a value\",\n         \"Basic scope concept(Local variable)\"\n      ]\n    }\n  ]\n}\n```\n**How to use this JSON:**\n\n1.  **Copy the JSON:** Copy the entire JSON block above.\n2.  **Parse with Python:** If you are using Python you can parse it like this:\n    ```python\n    import json\n\n    json_data = \"\"\"\n        {\n          \"courseTitle\": \"Python Fundamentals for Beginners\",\n          \"courseSummary\": \"This course provides a gentle introduction to the Python programming language. It covers basic syntax, data types, control flow, and simple functions, equipping you with the foundational knowledge to write basic Python programs.  It aims to build a solid understanding before moving onto more advanced topics.\",\n          \"levelOfDifficulty\": \"Easy\",\n          \"chapters\": [\n            {\n              \"chapterNumber\": 1,\n              \"chapterTitle\": \"Introduction to Python\",\n              \"chapterEmoji\": \"👋\",\n              \"summary\": \"This chapter introduces the Python language, its history, why it's popular, and how to set up your development environment. You will also write and run your first basic Python code.\",\n              \"topics\": [\n                \"What is Python?\",\n                \"Why Python?\",\n                \"Setting up Python Environment\",\n                \"Running your first Python program (Hello World)\",\n                  \"Basic Syntax (comments)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 2,\n              \"chapterTitle\": \"Data Types and Variables\",\n               \"chapterEmoji\": \"🧮\",\n              \"summary\": \"This chapter explains the core data types in Python (integers, floats, strings, and booleans) and how to declare and use variables to store them. It introduces the concept of operators\",\n              \"topics\": [\n                \"Integers (int)\",\n                \"Floating-point numbers (float)\",\n                \"Strings (str)\",\n                \"Booleans (bool)\",\n                \"Variables: Declaration and Assignment\",\n                \"Basic arithmetic operators (+, -, *, /, //, %, **)\",\n                   \"Comparison Operators (==, !=, >, <, >=, <=)\"\n\n              ]\n            },\n               {\n              \"chapterNumber\": 3,\n              \"chapterTitle\": \"Working with Strings\",\n               \"chapterEmoji\": \"💬\",\n              \"summary\": \"This chapter focuses on Strings in Python. It explores how to create, manipulate and format strings. Learn about common methods available for strings.\",\n              \"topics\": [\n                \"String creation\",\n                \"String Concatenation and Repetition\",\n                \"String Indexing and Slicing\",\n                 \"String length\",\n                \"Common string methods (lower(), upper(), strip(), replace(), find())\",\n                \"String formatting (f-strings)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 4,\n              \"chapterTitle\": \"Control Flow: Conditional Statements\",\n               \"chapterEmoji\": \"🚦\",\n              \"summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow your code to make decisions based on conditions. Learn to write programs that behave differently.\",\n              \"topics\": [\n                \"The `if` statement\",\n                \"The `if-else` statement\",\n                \"The `if-elif-else` statement\",\n                \"Nested `if` statements\",\n                \"Logical operators (`and`, `or`, `not`)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 5,\n              \"chapterTitle\": \"Control Flow: Loops\",\n               \"chapterEmoji\": \"🔄\",\n              \"summary\": \"This chapter covers `for` and `while` loops, enabling you to repeat code blocks efficiently. Understand how to iterate through lists and perform repetitive tasks.\",\n              \"topics\": [\n                \"The `for` loop\",\n                 \"Iterating through lists\",\n                 \"The `while` loop\",\n                 \"Break and continue statements\"\n              ]\n            },\n            {\n              \"chapterNumber\": 6,\n              \"chapterTitle\": \"Lists in Python\",\n               \"chapterEmoji\": \"🧾\",\n              \"summary\": \"This chapter introduces Python lists, which are used to store collections of items. You'll learn about creating, modifying, and iterating through lists.\",\n              \"topics\": [\n                  \"Creating lists\",\n                  \"Accessing list elements\",\n                  \"Modifying list elements\",\n                  \"List methods (append(), insert(), remove(), pop(), len())\",\n                  \"Iterating through lists with loops\"\n               ]\n            },\n             {\n              \"chapterNumber\": 7,\n              \"chapterTitle\": \"Introduction to Functions\",\n              \"chapterEmoji\": \"⚙️\",\n              \"summary\": \"This chapter introduces functions, their purpose, and syntax. Learn how to define and call basic functions to reuse code.\",\n               \"topics\": [\n                \"Defining a function using def\",\n                 \"Calling a function\",\n                 \"Function parameters and arguments\",\n                 \"Returning a value\",\n                 \"Basic scope concept(Local variable)\"\n              ]\n            }\n          ]\n        }\n    \"\"\"\n    data = json.loads(json_data)\n    print(data['courseTitle'])\n    for chapter in data['chapters']:\n      print(f\"Chapter {chapter['chapterNumber']}: {chapter['chapterTitle']} {chapter['chapterEmoji']}\")\n      print(f\"  Summary: {chapter['summary']}\")\n      print(\"  Topics:\")\n      for topic in chapter['topics']:\n        print(f\"    - {topic}\")\n    ```\n\nThis will output a structured view of the course material.\n**Key Features for Easy Difficulty:**\n\n*   **Basic Concepts:** Focuses on the most fundamental concepts in Python.\n*   **Clear Explanations:** Summaries are written in a beginner-friendly style.\n*   **Sequential Learning:** Chapters are designed to build on previous ones.\n*   **Concrete Examples (Not included in JSON):** In real teaching, use simple, clear code examples to illustrate each concept.\n\nThis JSON data structure provides an organized and easily accessible way to create course material and can be further processed for display in various formats, such as a webpage, document, etc.\n"},
            ],
          },
        ],
    });
  
    //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    //console.log(result.response.text());
 
   export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Quiz on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation in\nJSON format with explantion for correct answer,\nMaximum 15\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI Development, and Basic Navigation\",\n  \"questions\": [\n    {\n      \"questionId\": 1,\n      \"question\": \"What is the primary purpose of the `Flutter` framework?\",\n      \"options\": [\n        \"A) Building backend servers\",\n        \"B) Creating native mobile applications from a single codebase\",\n        \"C) Designing 3D games\",\n        \"D) Developing desktop applications only\"\n      ],\n      \"correctAnswer\": \"B\",\n      \"explanation\": \"Flutter is designed for building high-performance, natively compiled applications for mobile, web, and desktop from a single codebase. It is not primarily for backend, games, or desktop-only applications.\"\n    },\n    {\n      \"questionId\": 2,\n      \"question\": \"Which widget is the base for all user interfaces in Flutter?\",\n      \"options\": [\n        \"A) Container\",\n        \"B) Text\",\n        \"C) Widget\",\n        \"D) MaterialApp\"\n      ],\n       \"correctAnswer\": \"C\",\n       \"explanation\": \"In Flutter, everything is a widget. All UI elements, layouts, and components are derived from the base `Widget` class. While `MaterialApp` is a root level widget for Material Design apps, it's not the base for all UIs.\"\n    },\n     {\n       \"questionId\": 3,\n      \"question\": \"What is the purpose of the `pubspec.yaml` file in a Flutter project?\",\n      \"options\": [\n        \"A) To define the application's theme\",\n        \"B) To manage the application's state\",\n        \"C) To declare the application's dependencies and assets\",\n        \"D) To store the application's database schema\"\n      ],\n      \"correctAnswer\": \"C\",\n      \"explanation\": \"The `pubspec.yaml` file is the heart of dependency management and asset configuration in a Flutter project. It lists the libraries (packages) the project relies on, as well as the assets like images, fonts, and other resources.\"\n    },\n    {\n      \"questionId\": 4,\n      \"question\": \"Which layout widget allows you to arrange widgets in a single row?\",\n      \"options\": [\n        \"A) Column\",\n        \"B) Stack\",\n        \"C) ListView\",\n        \"D) Row\"\n      ],\n      \"correctAnswer\": \"D\",\n      \"explanation\": \"The `Row` widget arranges its children in a horizontal layout (a single row). `Column` arranges in a vertical layout, `Stack` overlaps its children, and `ListView` displays scrollable lists of widgets.\"\n    },\n     {\n       \"questionId\": 5,\n      \"question\": \"What does the `setState()` method do in a StatefulWidget?\",\n      \"options\": [\n        \"A) Changes the text of a widget\",\n        \"B) Updates the UI by rebuilding the widget's tree\",\n        \"C) Removes a widget from the tree\",\n        \"D) Resizes the app window\"\n      ],\n      \"correctAnswer\": \"B\",\n       \"explanation\": \"The `setState()` method is used within a `StatefulWidget`'s State to notify Flutter that the internal state of the widget has changed. When called, it triggers a rebuild of the widget's UI, reflecting the new state.\"\n    },\n    {\n      \"questionId\": 6,\n      \"question\": \"Which widget is typically used to implement a clickable button?\",\n      \"options\": [\n        \"A) Text\",\n        \"B) Container\",\n        \"C) ElevatedButton\",\n        \"D) Image\"\n      ],\n      \"correctAnswer\": \"C\",\n       \"explanation\": \"`ElevatedButton` (or `TextButton`, `OutlinedButton`) is specifically designed for user interaction and provides a visual representation of a button with touch feedback.\"\n    },\n    {\n      \"questionId\": 7,\n      \"question\": \"What is the purpose of `Navigator` in Flutter?\",\n      \"options\": [\n         \"A) To manage the app's theme\",\n        \"B) To handle user authentication\",\n        \"C) To control the app's routing and navigation between screens\",\n        \"D) To manage local storage\"\n      ],\n      \"correctAnswer\": \"C\",\n      \"explanation\": \"The `Navigator` is crucial for managing navigation between different screens or routes in a Flutter application. It handles the pushing and popping of routes from the navigation stack.\"\n    },\n    {\n        \"questionId\": 8,\n       \"question\": \"What is the role of `BuildContext`?\",\n       \"options\": [\n          \"A) It is a container for images.\",\n          \"B) It represents the location of a widget in the widget tree.\",\n          \"C) It stores user preferences.\",\n          \"D) It is used for network requests.\"\n        ],\n        \"correctAnswer\": \"B\",\n        \"explanation\": \"`BuildContext` provides information about the widget's position in the tree, and it is used to access resources higher up in the widget tree.\"\n    },\n    {\n     \"questionId\": 9,\n      \"question\": \"What does the term 'hot reload' mean in Flutter?\",\n      \"options\": [\n         \"A) Restarting the application from scratch\",\n          \"B)  Refreshing the app's data from the network\",\n         \"C)  Quickly applying code changes to a running application without losing its state\",\n         \"D) Compiling the application for production\"\n      ],\n      \"correctAnswer\": \"C\",\n      \"explanation\": \"Hot reload allows developers to see the impact of their code changes almost instantly, while maintaining the application's current state, which greatly speeds up the development process.\"\n    },\n    {\n      \"questionId\": 10,\n      \"question\": \"Which widget is used to create a scrollable list of widgets?\",\n      \"options\": [\n         \"A) Container\",\n         \"B) Row\",\n        \"C) Column\",\n         \"D) ListView\"\n       ],\n       \"correctAnswer\": \"D\",\n       \"explanation\":\"`ListView` widget displays its children in a scrollable way, making it suitable for showing long lists of items. `Container`, `Row`, and `Column` are general layout widgets.\"\n    },\n    {\n      \"questionId\": 11,\n      \"question\": \"What is the purpose of the `main()` function in a Flutter project?\",\n        \"options\": [\n          \"A) To define the application's theme\",\n         \"B) To declare the application's dependencies\",\n          \"C) To serve as the entry point of the application\",\n          \"D) To manage user authentication\"\n       ],\n       \"correctAnswer\": \"C\",\n      \"explanation\": \"The `main()` function is where execution of a Flutter app starts.  It initializes the Flutter framework and starts the main app widget.\"\n    },\n     {\n      \"questionId\": 12,\n      \"question\": \"How do you navigate to a new screen in Flutter using named routes?\",\n      \"options\": [\n        \"A) Using `push()` method of a Widget\",\n        \"B) Using `Navigator.pushNamed(context, '/routeName')`\",\n        \"C) Using `setState()` to change the screen\",\n        \"D) Using `Widget()` function\"\n      ],\n      \"correctAnswer\": \"B\",\n      \"explanation\": \"`Navigator.pushNamed(context, '/routeName')` is the standard way to navigate to a named route in Flutter.\"\n    },\n      {\n      \"questionId\": 13,\n      \"question\": \"Which widget is used to add padding around other widgets?\",\n      \"options\": [\n        \"A) Center\",\n        \"B) Align\",\n        \"C) Padding\",\n        \"D) Margin\"\n      ],\n      \"correctAnswer\": \"C\",\n      \"explanation\": \"The `Padding` widget adds space around its child widget. While margin is a concept, Flutter uses `padding` to define spacing around a widget from its boundaries.\"\n    },\n    {\n      \"questionId\": 14,\n      \"question\": \"Which of the following best describes a 'StatefulWidget' in Flutter?\",\n        \"options\": [\n           \"A) A widget that does not have any UI\",\n            \"B) A widget that has its data immutable\",\n           \"C) A widget that can change its internal data during its lifetime, which causes UI to update\",\n            \"D) A widget used to create basic layouts\"\n        ],\n        \"correctAnswer\": \"C\",\n        \"explanation\": \"StatefulWidgets are dynamic and can change their UI and internal data over time using State objects. This is in contrast with StatelessWidget.\"\n    },\n    {\n      \"questionId\": 15,\n       \"question\": \"What does the `MaterialApp` widget provide in Flutter?\",\n      \"options\": [\n          \"A) Core styling and components for Material Design\",\n           \"B) Core functionality for networking\",\n          \"C) Core functions for animation\",\n           \"D) Functions for database operations\"\n         ],\n         \"correctAnswer\":\"A\",\n         \"explanation\": \"`MaterialApp` widget provides the basic Material Design visual structure and components that many mobile apps use.\"\n    }\n  ]\n}\n```"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "give correct answer not option"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI Development, and Basic Navigation\",\n  \"questions\": [\n    {\n      \"questionId\": 1,\n      \"question\": \"What is the primary purpose of the `Flutter` framework?\",\n      \"options\": [\n        \"A) Building backend servers\",\n        \"B) Creating native mobile applications from a single codebase\",\n        \"C) Designing 3D games\",\n        \"D) Developing desktop applications only\"\n      ],\n      \"correctAnswer\": \"Creating native mobile applications from a single codebase\",\n      \"explanation\": \"Flutter is designed for building high-performance, natively compiled applications for mobile, web, and desktop from a single codebase. It is not primarily for backend, games, or desktop-only applications.\"\n    },\n    {\n      \"questionId\": 2,\n      \"question\": \"Which widget is the base for all user interfaces in Flutter?\",\n      \"options\": [\n        \"A) Container\",\n        \"B) Text\",\n        \"C) Widget\",\n        \"D) MaterialApp\"\n      ],\n       \"correctAnswer\": \"Widget\",\n       \"explanation\": \"In Flutter, everything is a widget. All UI elements, layouts, and components are derived from the base `Widget` class. While `MaterialApp` is a root level widget for Material Design apps, it's not the base for all UIs.\"\n    },\n     {\n       \"questionId\": 3,\n      \"question\": \"What is the purpose of the `pubspec.yaml` file in a Flutter project?\",\n      \"options\": [\n        \"A) To define the application's theme\",\n        \"B) To manage the application's state\",\n        \"C) To declare the application's dependencies and assets\",\n        \"D) To store the application's database schema\"\n      ],\n      \"correctAnswer\": \"To declare the application's dependencies and assets\",\n      \"explanation\": \"The `pubspec.yaml` file is the heart of dependency management and asset configuration in a Flutter project. It lists the libraries (packages) the project relies on, as well as the assets like images, fonts, and other resources.\"\n    },\n    {\n      \"questionId\": 4,\n      \"question\": \"Which layout widget allows you to arrange widgets in a single row?\",\n      \"options\": [\n        \"A) Column\",\n        \"B) Stack\",\n        \"C) ListView\",\n        \"D) Row\"\n      ],\n      \"correctAnswer\": \"Row\",\n      \"explanation\": \"The `Row` widget arranges its children in a horizontal layout (a single row). `Column` arranges in a vertical layout, `Stack` overlaps its children, and `ListView` displays scrollable lists of widgets.\"\n    },\n     {\n       \"questionId\": 5,\n      \"question\": \"What does the `setState()` method do in a StatefulWidget?\",\n      \"options\": [\n        \"A) Changes the text of a widget\",\n        \"B) Updates the UI by rebuilding the widget's tree\",\n        \"C) Removes a widget from the tree\",\n        \"D) Resizes the app window\"\n      ],\n      \"correctAnswer\": \"Updates the UI by rebuilding the widget's tree\",\n       \"explanation\": \"The `setState()` method is used within a `StatefulWidget`'s State to notify Flutter that the internal state of the widget has changed. When called, it triggers a rebuild of the widget's UI, reflecting the new state.\"\n    },\n    {\n      \"questionId\": 6,\n      \"question\": \"Which widget is typically used to implement a clickable button?\",\n      \"options\": [\n        \"A) Text\",\n        \"B) Container\",\n        \"C) ElevatedButton\",\n        \"D) Image\"\n      ],\n      \"correctAnswer\": \"ElevatedButton\",\n       \"explanation\": \"`ElevatedButton` (or `TextButton`, `OutlinedButton`) is specifically designed for user interaction and provides a visual representation of a button with touch feedback.\"\n    },\n    {\n      \"questionId\": 7,\n      \"question\": \"What is the purpose of `Navigator` in Flutter?\",\n      \"options\": [\n         \"A) To manage the app's theme\",\n        \"B) To handle user authentication\",\n        \"C) To control the app's routing and navigation between screens\",\n        \"D) To manage local storage\"\n      ],\n      \"correctAnswer\": \"To control the app's routing and navigation between screens\",\n      \"explanation\": \"The `Navigator` is crucial for managing navigation between different screens or routes in a Flutter application. It handles the pushing and popping of routes from the navigation stack.\"\n    },\n    {\n        \"questionId\": 8,\n       \"question\": \"What is the role of `BuildContext`?\",\n       \"options\": [\n          \"A) It is a container for images.\",\n          \"B) It represents the location of a widget in the widget tree.\",\n          \"C) It stores user preferences.\",\n          \"D) It is used for network requests.\"\n        ],\n        \"correctAnswer\": \"It represents the location of a widget in the widget tree.\",\n        \"explanation\": \"`BuildContext` provides information about the widget's position in the tree, and it is used to access resources higher up in the widget tree.\"\n    },\n    {\n     \"questionId\": 9,\n      \"question\": \"What does the term 'hot reload' mean in Flutter?\",\n      \"options\": [\n         \"A) Restarting the application from scratch\",\n          \"B)  Refreshing the app's data from the network\",\n         \"C)  Quickly applying code changes to a running application without losing its state\",\n         \"D) Compiling the application for production\"\n      ],\n      \"correctAnswer\": \"Quickly applying code changes to a running application without losing its state\",\n      \"explanation\": \"Hot reload allows developers to see the impact of their code changes almost instantly, while maintaining the application's current state, which greatly speeds up the development process.\"\n    },\n    {\n      \"questionId\": 10,\n      \"question\": \"Which widget is used to create a scrollable list of widgets?\",\n      \"options\": [\n         \"A) Container\",\n         \"B) Row\",\n        \"C) Column\",\n         \"D) ListView\"\n       ],\n       \"correctAnswer\": \"ListView\",\n       \"explanation\":\"`ListView` widget displays its children in a scrollable way, making it suitable for showing long lists of items. `Container`, `Row`, and `Column` are general layout widgets.\"\n    },\n    {\n      \"questionId\": 11,\n      \"question\": \"What is the purpose of the `main()` function in a Flutter project?\",\n        \"options\": [\n          \"A) To define the application's theme\",\n         \"B) To declare the application's dependencies\",\n          \"C) To serve as the entry point of the application\",\n          \"D) To manage user authentication\"\n       ],\n       \"correctAnswer\": \"To serve as the entry point of the application\",\n      \"explanation\": \"The `main()` function is where execution of a Flutter app starts.  It initializes the Flutter framework and starts the main app widget.\"\n    },\n     {\n      \"questionId\": 12,\n      \"question\": \"How do you navigate to a new screen in Flutter using named routes?\",\n      \"options\": [\n        \"A) Using `push()` method of a Widget\",\n        \"B) Using `Navigator.pushNamed(context, '/routeName')`\",\n        \"C) Using `setState()` to change the screen\",\n        \"D) Using `Widget()` function\"\n      ],\n      \"correctAnswer\": \"Using `Navigator.pushNamed(context, '/routeName')\",\n      \"explanation\": \"`Navigator.pushNamed(context, '/routeName')` is the standard way to navigate to a named route in Flutter.\"\n    },\n      {\n      \"questionId\": 13,\n      \"question\": \"Which widget is used to add padding around other widgets?\",\n      \"options\": [\n        \"A) Center\",\n        \"B) Align\",\n        \"C) Padding\",\n        \"D) Margin\"\n      ],\n      \"correctAnswer\": \"Padding\",\n      \"explanation\": \"The `Padding` widget adds space around its child widget. While margin is a concept, Flutter uses `padding` to define spacing around a widget from its boundaries.\"\n    },\n    {\n      \"questionId\": 14,\n      \"question\": \"Which of the following best describes a 'StatefulWidget' in Flutter?\",\n        \"options\": [\n           \"A) A widget that does not have any UI\",\n            \"B) A widget that has its data immutable\",\n           \"C) A widget that can change its internal data during its lifetime, which causes UI to update\",\n            \"D) A widget used to create basic layouts\"\n        ],\n        \"correctAnswer\": \"A widget that can change its internal data during its lifetime, which causes UI to update\",\n        \"explanation\": \"StatefulWidgets are dynamic and can change their UI and internal data over time using State objects. This is in contrast with StatelessWidget.\"\n    },\n    {\n      \"questionId\": 15,\n       \"question\": \"What does the `MaterialApp` widget provide in Flutter?\",\n      \"options\": [\n          \"A) Core styling and components for Material Design\",\n           \"B) Core functionality for networking\",\n          \"C) Core functions for animation\",\n           \"D) Functions for database operations\"\n         ],\n         \"correctAnswer\":\"Core styling and components for Material Design\",\n         \"explanation\": \"`MaterialApp` widget provides the basic Material Design visual structure and components that many mobile apps use.\"\n    }\n  ]\n}\n```"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "remove a,b,c,d in options "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI Development, and Basic Navigation\",\n  \"questions\": [\n    {\n      \"questionId\": 1,\n      \"question\": \"What is the primary purpose of the `Flutter` framework?\",\n      \"options\": [\n        \"Building backend servers\",\n        \"Creating native mobile applications from a single codebase\",\n        \"Designing 3D games\",\n        \"Developing desktop applications only\"\n      ],\n      \"correctAnswer\": \"Creating native mobile applications from a single codebase\",\n      \"explanation\": \"Flutter is designed for building high-performance, natively compiled applications for mobile, web, and desktop from a single codebase. It is not primarily for backend, games, or desktop-only applications.\"\n    },\n    {\n      \"questionId\": 2,\n      \"question\": \"Which widget is the base for all user interfaces in Flutter?\",\n      \"options\": [\n        \"Container\",\n        \"Text\",\n        \"Widget\",\n        \"MaterialApp\"\n      ],\n       \"correctAnswer\": \"Widget\",\n       \"explanation\": \"In Flutter, everything is a widget. All UI elements, layouts, and components are derived from the base `Widget` class. While `MaterialApp` is a root level widget for Material Design apps, it's not the base for all UIs.\"\n    },\n     {\n       \"questionId\": 3,\n      \"question\": \"What is the purpose of the `pubspec.yaml` file in a Flutter project?\",\n      \"options\": [\n        \"To define the application's theme\",\n        \"To manage the application's state\",\n        \"To declare the application's dependencies and assets\",\n        \"To store the application's database schema\"\n      ],\n      \"correctAnswer\": \"To declare the application's dependencies and assets\",\n      \"explanation\": \"The `pubspec.yaml` file is the heart of dependency management and asset configuration in a Flutter project. It lists the libraries (packages) the project relies on, as well as the assets like images, fonts, and other resources.\"\n    },\n    {\n      \"questionId\": 4,\n      \"question\": \"Which layout widget allows you to arrange widgets in a single row?\",\n      \"options\": [\n        \"Column\",\n        \"Stack\",\n        \"ListView\",\n        \"Row\"\n      ],\n      \"correctAnswer\": \"Row\",\n      \"explanation\": \"The `Row` widget arranges its children in a horizontal layout (a single row). `Column` arranges in a vertical layout, `Stack` overlaps its children, and `ListView` displays scrollable lists of widgets.\"\n    },\n     {\n       \"questionId\": 5,\n      \"question\": \"What does the `setState()` method do in a StatefulWidget?\",\n      \"options\": [\n        \"Changes the text of a widget\",\n        \"Updates the UI by rebuilding the widget's tree\",\n        \"Removes a widget from the tree\",\n        \"Resizes the app window\"\n      ],\n      \"correctAnswer\": \"Updates the UI by rebuilding the widget's tree\",\n       \"explanation\": \"The `setState()` method is used within a `StatefulWidget`'s State to notify Flutter that the internal state of the widget has changed. When called, it triggers a rebuild of the widget's UI, reflecting the new state.\"\n    },\n    {\n      \"questionId\": 6,\n      \"question\": \"Which widget is typically used to implement a clickable button?\",\n      \"options\": [\n        \"Text\",\n        \"Container\",\n        \"ElevatedButton\",\n        \"Image\"\n      ],\n      \"correctAnswer\": \"ElevatedButton\",\n       \"explanation\": \"`ElevatedButton` (or `TextButton`, `OutlinedButton`) is specifically designed for user interaction and provides a visual representation of a button with touch feedback.\"\n    },\n    {\n      \"questionId\": 7,\n      \"question\": \"What is the purpose of `Navigator` in Flutter?\",\n      \"options\": [\n         \"To manage the app's theme\",\n        \"To handle user authentication\",\n        \"To control the app's routing and navigation between screens\",\n        \"To manage local storage\"\n      ],\n      \"correctAnswer\": \"To control the app's routing and navigation between screens\",\n      \"explanation\": \"The `Navigator` is crucial for managing navigation between different screens or routes in a Flutter application. It handles the pushing and popping of routes from the navigation stack.\"\n    },\n    {\n        \"questionId\": 8,\n       \"question\": \"What is the role of `BuildContext`?\",\n       \"options\": [\n          \"It is a container for images.\",\n          \"It represents the location of a widget in the widget tree.\",\n          \"It stores user preferences.\",\n          \"It is used for network requests.\"\n        ],\n        \"correctAnswer\": \"It represents the location of a widget in the widget tree.\",\n        \"explanation\": \"`BuildContext` provides information about the widget's position in the tree, and it is used to access resources higher up in the widget tree.\"\n    },\n    {\n     \"questionId\": 9,\n      \"question\": \"What does the term 'hot reload' mean in Flutter?\",\n      \"options\": [\n         \"Restarting the application from scratch\",\n          \"Refreshing the app's data from the network\",\n         \"Quickly applying code changes to a running application without losing its state\",\n         \"Compiling the application for production\"\n      ],\n      \"correctAnswer\": \"Quickly applying code changes to a running application without losing its state\",\n      \"explanation\": \"Hot reload allows developers to see the impact of their code changes almost instantly, while maintaining the application's current state, which greatly speeds up the development process.\"\n    },\n    {\n      \"questionId\": 10,\n      \"question\": \"Which widget is used to create a scrollable list of widgets?\",\n      \"options\": [\n         \"Container\",\n         \"Row\",\n        \"Column\",\n         \"ListView\"\n       ],\n       \"correctAnswer\": \"ListView\",\n       \"explanation\":\"`ListView` widget displays its children in a scrollable way, making it suitable for showing long lists of items. `Container`, `Row`, and `Column` are general layout widgets.\"\n    },\n    {\n      \"questionId\": 11,\n      \"question\": \"What is the purpose of the `main()` function in a Flutter project?\",\n        \"options\": [\n          \"To define the application's theme\",\n         \"To declare the application's dependencies\",\n          \"To serve as the entry point of the application\",\n          \"To manage user authentication\"\n       ],\n       \"correctAnswer\": \"To serve as the entry point of the application\",\n      \"explanation\": \"The `main()` function is where execution of a Flutter app starts.  It initializes the Flutter framework and starts the main app widget.\"\n    },\n     {\n      \"questionId\": 12,\n      \"question\": \"How do you navigate to a new screen in Flutter using named routes?\",\n      \"options\": [\n        \"Using `push()` method of a Widget\",\n        \"Using `Navigator.pushNamed(context, '/routeName')`\",\n        \"Using `setState()` to change the screen\",\n        \"Using `Widget()` function\"\n      ],\n      \"correctAnswer\": \"Using `Navigator.pushNamed(context, '/routeName')\",\n      \"explanation\": \"`Navigator.pushNamed(context, '/routeName')` is the standard way to navigate to a named route in Flutter.\"\n    },\n      {\n      \"questionId\": 13,\n      \"question\": \"Which widget is used to add padding around other widgets?\",\n      \"options\": [\n        \"Center\",\n        \"Align\",\n        \"Padding\",\n        \"Margin\"\n      ],\n      \"correctAnswer\": \"Padding\",\n      \"explanation\": \"The `Padding` widget adds space around its child widget. While margin is a concept, Flutter uses `padding` to define spacing around a widget from its boundaries.\"\n    },\n    {\n      \"questionId\": 14,\n      \"question\": \"Which of the following best describes a 'StatefulWidget' in Flutter?\",\n        \"options\": [\n           \"A widget that does not have any UI\",\n            \"A widget that has its data immutable\",\n           \"A widget that can change its internal data during its lifetime, which causes UI to update\",\n            \"A widget used to create basic layouts\"\n        ],\n        \"correctAnswer\": \"A widget that can change its internal data during its lifetime, which causes UI to update\",\n        \"explanation\": \"StatefulWidgets are dynamic and can change their UI and internal data over time using State objects. This is in contrast with StatelessWidget.\"\n    },\n    {\n      \"questionId\": 15,\n       \"question\": \"What does the `MaterialApp` widget provide in Flutter?\",\n      \"options\": [\n          \"Core styling and components for Material Design\",\n           \"Core functionality for networking\",\n          \"Core functions for animation\",\n           \"Functions for database operations\"\n         ],\n         \"correctAnswer\":\"Core styling and components for Material Design\",\n         \"explanation\": \"`MaterialApp` widget provides the basic Material Design visual structure and components that many mobile apps use.\"\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });


    export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the flashcard on topic : Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the basic building block of a Flutter UI. Everything in Flutter is a widget, from buttons and text to layouts and entire screens.\"\n  },\n  {\n      \"front\": \"What's the difference between StatelessWidget and StatefulWidget?\",\n      \"back\": \"StatelessWidgets don't change over time; their UI is immutable. StatefulWidgets maintain a state that can change, leading to UI updates.\"\n   },\n   {\n    \"front\": \"Name 3 common layout widgets in Flutter.\",\n    \"back\": \"Container, Row, Column.\"\n  },\n  {\n    \"front\": \"What does 'BuildContext' represent?\",\n     \"back\": \"BuildContext is a handle to the location of a widget in the widget tree. It's needed for certain actions like navigation and accessing theme data.\"\n  },\n {\n   \"front\": \"What is the purpose of 'MaterialApp' widget?\",\n    \"back\":\"MaterialApp is a fundamental widget that configures the root of your Flutter app. It sets up the Material Design theme, navigation, and more.\"\n },\n {\n    \"front\": \"What does the 'Scaffold' widget do?\",\n    \"back\": \"The 'Scaffold' widget implements the basic visual layout structure for a Material Design app, including the app bar, body, and bottom navigation bar.\"\n  },\n  {\n    \"front\": \"How do you add padding around a widget?\",\n    \"back\": \"Use the 'Padding' widget, wrapping your desired widget and specifying the padding values.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Use `Navigator.push(context, MaterialPageRoute(builder: (context) => YourNewScreen()));`\"\n  },\n    {\n    \"front\": \"What is 'Navigator.pushReplacement' used for?\",\n    \"back\": \"It replaces the current screen on the navigation stack with the new screen, preventing the user from returning to the previous one with the back button.\"\n  },\n  {\n    \"front\": \"How to pass data to a new screen during navigation?\",\n    \"back\": \"Pass data as an argument to the constructor of the new screen class and access it in the build method of the new screen. You can also use named routes to pass data.\"\n   },\n {\n    \"front\": \"What is a 'Route' in Flutter?\",\n    \"back\":\"A Route represents a screen or a part of the app that is part of the navigation flow.\"\n },\n{\n    \"front\":\"What are named routes?\",\n     \"back\":\"Named routes allow you to define your routes with names which is more readable and easy to manage rather than using anonymous routes.\"\n  },\n    {\n    \"front\": \"How do you use 'Center' widget?\",\n    \"back\": \"The 'Center' widget centers its child widget both horizontally and vertically within its parent container.\"\n  },\n  {\n    \"front\": \"What is 'main.dart' in Flutter?\",\n    \"back\": \"'main.dart' is the entry point of your Flutter application. It usually contains the 'main()' function that runs your application\"\n  },\n  {\n   \"front\":\"What is 'pubspec.yaml' file in Flutter?\",\n   \"back\": \"The 'pubspec.yaml' file is a configuration file used to manage a Flutter project's dependencies, assets, and other project settings.\"\n  }\n]\n```\n"},
          ],
        },
      ],
    });
  

    export const GenerateQuizAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the quiz on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation in\nJSON format with explanation for correct answer,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI & Navigation Quiz\",\n  \"questions\": [\n    {\n      \"questionNumber\": 1,\n      \"question\": \"Which widget is the foundation of most user interfaces in Flutter?\",\n      \"options\": [\n        \"Text\",\n        \"Container\",\n        \"Widget\",\n        \"Scaffold\"\n      ],\n      \"correctAnswer\": \"Widget\",\n      \"explanation\": \"While Text, Container and Scaffold are important widgets, 'Widget' is the most fundamental class in Flutter's UI structure. Everything is a widget in Flutter, it's the base building block.\"\n    },\n     {\n      \"questionNumber\": 2,\n      \"question\": \"Which widget is typically used to create a basic visual structure with an AppBar and body?\",\n      \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Container\",\n        \"Scaffold\"\n      ],\n      \"correctAnswer\": \"Scaffold\",\n      \"explanation\": \"Scaffold provides the fundamental visual layout structure for most apps, including an AppBar and a body area, handling things like displaying a SnackBar or BottomSheet.\"\n    },\n    {\n      \"questionNumber\": 3,\n      \"question\": \"Which widget is used to arrange its children in a single column?\",\n      \"options\": [\n         \"Row\",\n         \"Column\",\n         \"Stack\",\n         \"Listview\"\n       ],\n       \"correctAnswer\": \"Column\",\n       \"explanation\": \"The 'Column' widget will place its child widgets one below the other vertically.\"\n     },\n     {\n      \"questionNumber\": 4,\n       \"question\": \"Which property is used to change the color of a Container widget?\",\n       \"options\": [\n          \"background\",\n          \"color\",\n          \"backgroundColor\",\n          \"fillColor\"\n        ],\n        \"correctAnswer\": \"color\",\n        \"explanation\": \"The 'color' property is used to set the background color of a Container widget.\"\n    },\n     {\n       \"questionNumber\": 5,\n       \"question\": \"What is the purpose of the 'setState' method in Flutter?\",\n        \"options\": [\n         \"To update the application's global state\",\n         \"To rebuild a widget's user interface\",\n          \"To change the layout of widgets\",\n          \"To start a new screen\"\n        ],\n        \"correctAnswer\": \"To rebuild a widget's user interface\",\n        \"explanation\": \"'setState' is used within State classes to notify Flutter that the internal state of the widget has changed, causing the framework to rebuild the UI with the new data.\"\n      },\n       {\n        \"questionNumber\": 6,\n        \"question\": \"Which widget is used for displaying scrollable content in Flutter?\",\n        \"options\": [\n           \"Container\",\n           \"Column\",\n           \"Row\",\n           \"ListView\"\n          ],\n          \"correctAnswer\": \"ListView\",\n          \"explanation\": \"The 'ListView' widget is specifically designed to display a list of items that can be scrolled.\"\n        },\n    {\n      \"questionNumber\": 7,\n      \"question\": \"Which widget is used to manage app navigation and screen transitions in Flutter?\",\n      \"options\": [\n        \"TextButton\",\n        \"Navigator\",\n         \"Stack\",\n        \"FloatingActionButton\"\n      ],\n      \"correctAnswer\": \"Navigator\",\n      \"explanation\": \"The 'Navigator' widget is the core component that manages the app's navigation stack, enabling screen transitions (push, pop, etc.).\"\n    },\n     {\n        \"questionNumber\": 8,\n        \"question\": \"What is the 'MaterialApp' widget primarily used for?\",\n        \"options\": [\n          \"To define the application's state\",\n          \"To define the application's visual structure\",\n          \"To define the application's network connection\",\n          \"To define a custom widget\"\n        ],\n        \"correctAnswer\": \"To define the application's visual structure\",\n        \"explanation\": \"The 'MaterialApp' widget sets up the overall structure of the application with Material Design visual elements, routing, theming etc.\"\n      },\n      {\n        \"questionNumber\": 9,\n        \"question\": \"How to define routes in Flutter?\",\n         \"options\": [\n           \"Using a Route widget\",\n            \"Using a list of screen widgets\",\n           \"Using 'routes' property in MaterialApp\",\n           \"Using setState\"\n          ],\n          \"correctAnswer\": \"Using 'routes' property in MaterialApp\",\n          \"explanation\": \"The 'routes' property within MaterialApp is where you typically define the available routes in your Flutter application using name-route mapping.\"\n       },\n      {\n        \"questionNumber\": 10,\n        \"question\": \"What does 'BuildContext' represent in Flutter?\",\n        \"options\": [\n          \"The state of the current widget\",\n          \"The location of the widget in the tree\",\n          \"The application's global data\",\n          \"The data passed between screens\"\n        ],\n       \"correctAnswer\": \"The location of the widget in the tree\",\n        \"explanation\": \"'BuildContext' is an object that provides the location of a widget in the widget tree and provides access to other resources and services.\"\n     },\n      {\n       \"questionNumber\": 11,\n       \"question\": \"Which method do we use to navigate to a new route and remove the current route in the stack?\",\n        \"options\": [\n         \"Navigator.pushNamed()\",\n          \"Navigator.pop()\",\n          \"Navigator.pushReplacementNamed()\",\n          \"Navigator.popUntil()\"\n         ],\n       \"correctAnswer\": \"Navigator.pushReplacementNamed()\",\n        \"explanation\": \"Navigator.pushReplacementNamed replaces the current screen with the new screen which removes the previous screen from the navigation stack and thus prevents the user from going back using the back button.\"\n      },\n      {\n      \"questionNumber\": 12,\n      \"question\": \"What is 'Hot Reload' in Flutter?\",\n       \"options\": [\n          \"A way to restart the application from scratch\",\n          \"A technique to deploy app in the app stores\",\n          \"A tool to quickly apply code changes and see the changes in the running app\",\n          \"A technique to handle exceptions\"\n       ],\n      \"correctAnswer\": \"A tool to quickly apply code changes and see the changes in the running app\",\n      \"explanation\": \"Hot Reload is one of the most powerful features of flutter. It allows to see the code changes in the running app instantly.\"\n      },\n     {\n        \"questionNumber\": 13,\n        \"question\": \"What is a 'Key' in Flutter?\",\n         \"options\": [\n          \"A way to encrypt sensitive data\",\n           \"A unique identifier for widgets\",\n            \"A styling attribute\",\n          \"A method to perform background task\"\n          ],\n        \"correctAnswer\": \"A unique identifier for widgets\",\n        \"explanation\": \"Keys are used to keep track of the widgets in the tree, particularly when dealing with list items, stateful widgets and animations.\"\n      },\n        {\n        \"questionNumber\": 14,\n        \"question\": \"What are the two main types of widgets in Flutter?\",\n        \"options\": [\n          \"Text and Image Widgets\",\n          \"Stateless and Stateful Widgets\",\n          \"Layout and Button Widgets\",\n          \"Basic and Complex Widgets\"\n          ],\n        \"correctAnswer\": \"Stateless and Stateful Widgets\",\n        \"explanation\": \"Stateless widgets do not change their state while stateful widgets rebuild their UI as their state changes.\"\n       },\n      {\n        \"questionNumber\": 15,\n        \"question\": \"What is the purpose of pubspec.yaml?\",\n        \"options\": [\n            \"To define routes in app\",\n            \"To manage dependencies and metadata of the project\",\n            \"To manage state\",\n             \"To change UI of the app\"\n         ],\n        \"correctAnswer\": \"To manage dependencies and metadata of the project\",\n        \"explanation\":\"The pubspec.yaml file is crucial for your Flutter project as it lists the packages/dependencies your app relies on, along with other meta information.\"\n      }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });


 export  const GenerateQAAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Question And Answers on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation in\nJSON format with front back content,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"question\": \"What is Flutter?\",\n    \"answer\": \"Flutter is an open-source UI software development kit created by Google. It is used to develop cross-platform applications for Android, iOS, Linux, macOS, Windows, and the web from a single codebase.\",\n      \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is Flutter?\"\n  },\n  {\n    \"question\": \"What language is Flutter primarily written in?\",\n    \"answer\": \"Flutter is primarily written in the Dart programming language.\",\n     \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What language is Flutter primarily written in?\"\n  },\n  {\n    \"question\": \"What is a 'Widget' in Flutter?\",\n    \"answer\": \"In Flutter, everything is a widget. A widget is a structural component that represents an element in the user interface, like a button, text field, or image.\",\n    \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is a 'Widget' in Flutter?\"\n  },\n  {\n    \"question\": \"What is the difference between 'StatelessWidget' and 'StatefulWidget'?\",\n    \"answer\": \"A 'StatelessWidget' is immutable and does not change once created. A 'StatefulWidget' can change over time due to user interaction or data updates.\",\n     \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is the difference between 'StatelessWidget' and 'StatefulWidget'?\"\n  },\n    {\n    \"question\": \"Name three commonly used layout widgets in Flutter.\",\n    \"answer\": \"Three commonly used layout widgets are: Container, Row, Column.\",\n      \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"Name three commonly used layout widgets in Flutter.\"\n  },\n  {\n      \"question\": \"What is the purpose of the `build()` method in a Flutter widget?\",\n      \"answer\": \"The `build()` method describes how a widget should be rendered in the UI. It returns a widget tree that Flutter uses to display the UI.\",\n      \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"What is the purpose of the `build()` method in a Flutter widget?\"\n  },\n  {\n    \"question\":\"How do you handle user input in Flutter?\",\n    \"answer\":\"User input can be handled using widgets like `TextField`, `ElevatedButton` along with callback functions like `onChanged`, `onPressed`.\",\n     \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"How do you handle user input in Flutter?\"\n  },\n   {\n    \"question\": \"What is the purpose of the `setState()` method in a StatefulWidget?\",\n    \"answer\": \"The `setState()` method informs Flutter that the state of a `StatefulWidget` has changed, causing the UI to be rebuilt to reflect those changes.\",\n     \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"What is the purpose of the `setState()` method in a StatefulWidget?\"\n  },\n {\n    \"question\": \"What is the main purpose of using `Navigator` in Flutter?\",\n    \"answer\": \"The `Navigator` widget is used for managing app navigation, such as pushing new screens onto the stack and popping back to previous ones.\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"What is the main purpose of using `Navigator` in Flutter?\"\n  },\n  {\n    \"question\": \"What are the two primary ways to navigate in Flutter using the Navigator?\",\n    \"answer\": \"The two primary ways are: `Navigator.push` for moving to a new screen and `Navigator.pop` for returning to the previous one.\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"What are the two primary ways to navigate in Flutter using the Navigator?\"\n  },\n    {\n      \"question\": \"What is a 'Route' in Flutter navigation?\",\n      \"answer\":\"A Route in Flutter navigation is an abstraction for a screen or page. It encapsulates the destination (Widget) and transition.\",\n      \"front\": \"Basic App Navigation\",\n       \"back\": \"What is a 'Route' in Flutter navigation?\"\n    },\n  {\n    \"question\": \"How do you pass data when navigating to a new screen?\",\n    \"answer\": \"Data can be passed when navigating using arguments in `Navigator.push` (e.g., as part of a named route or using a constructor).\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"How do you pass data when navigating to a new screen?\"\n  },\n  {\n    \"question\": \"What are named routes and how are they useful?\",\n    \"answer\": \"Named routes associate string names with routes. This allows you to navigate between pages by name which makes code more maintainable and easier to read.\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"What are named routes and how are they useful?\"\n  },\n {\n      \"question\":\"What is the difference between `push` and `pushReplacementNamed`?\",\n      \"answer\":\"`push` adds a new page on top of current one, while `pushReplacementNamed` replaces current page with new one.\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"What is the difference between `push` and `pushReplacementNamed`?\"\n  },\n{\n \"question\": \"How to implement basic navigation with MaterialPageRoute?\",\n \"answer\":\"`MaterialPageRoute` is used with `Navigator.push` and `Navigator.pushNamed` to provide material design transitions between screens. Example: `Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()));`\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"How to implement basic navigation with MaterialPageRoute?\"\n}\n]\n```\n"},
          ],
        },
      ],
    });
  
  