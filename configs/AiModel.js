const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const generationConfig2 = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const courseOutlineAIModel = model.startChat({
        generationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "Generate a study material for\npython for exam and level of difficulty\nwill be easy with summary of course,course Title,\n1 List of Chapters along with summary,chapter emoji\nfor each chapter, Topic list in each,All chapter in\nJSON format"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "Okay, here's a JSON formatted study material for a beginner-level Python exam, designed to be easy and with the requested components:\n\n```json\n{\n  \"courseTitle\": \"Python Fundamentals for Beginners\",\n  \"courseSummary\": \"This course provides a gentle introduction to the Python programming language. It covers basic syntax, data types, control flow, and simple functions, equipping you with the foundational knowledge to write basic Python programs.  It aims to build a solid understanding before moving onto more advanced topics.\",\n  \"levelOfDifficulty\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Introduction to Python\",\n      \"chapterEmoji\": \"👋\",\n      \"summary\": \"This chapter introduces the Python language, its history, why it's popular, and how to set up your development environment. You will also write and run your first basic Python code.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why Python?\",\n        \"Setting up Python Environment\",\n        \"Running your first Python program (Hello World)\",\n          \"Basic Syntax (comments)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterTitle\": \"Data Types and Variables\",\n       \"chapterEmoji\": \"🧮\",\n      \"summary\": \"This chapter explains the core data types in Python (integers, floats, strings, and booleans) and how to declare and use variables to store them. It introduces the concept of operators\",\n      \"topics\": [\n        \"Integers (int)\",\n        \"Floating-point numbers (float)\",\n        \"Strings (str)\",\n        \"Booleans (bool)\",\n        \"Variables: Declaration and Assignment\",\n        \"Basic arithmetic operators (+, -, *, /, //, %, **)\",\n           \"Comparison Operators (==, !=, >, <, >=, <=)\"\n\n      ]\n    },\n       {\n      \"chapterNumber\": 3,\n      \"chapterTitle\": \"Working with Strings\",\n       \"chapterEmoji\": \"💬\",\n      \"summary\": \"This chapter focuses on Strings in Python. It explores how to create, manipulate and format strings. Learn about common methods available for strings.\",\n      \"topics\": [\n        \"String creation\",\n        \"String Concatenation and Repetition\",\n        \"String Indexing and Slicing\",\n         \"String length\",\n        \"Common string methods (lower(), upper(), strip(), replace(), find())\",\n        \"String formatting (f-strings)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 4,\n      \"chapterTitle\": \"Control Flow: Conditional Statements\",\n       \"chapterEmoji\": \"🚦\",\n      \"summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow your code to make decisions based on conditions. Learn to write programs that behave differently.\",\n      \"topics\": [\n        \"The `if` statement\",\n        \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements\",\n        \"Logical operators (`and`, `or`, `not`)\"\n      ]\n    },\n    {\n      \"chapterNumber\": 5,\n      \"chapterTitle\": \"Control Flow: Loops\",\n       \"chapterEmoji\": \"🔄\",\n      \"summary\": \"This chapter covers `for` and `while` loops, enabling you to repeat code blocks efficiently. Understand how to iterate through lists and perform repetitive tasks.\",\n      \"topics\": [\n        \"The `for` loop\",\n         \"Iterating through lists\",\n         \"The `while` loop\",\n         \"Break and continue statements\"\n      ]\n    },\n    {\n      \"chapterNumber\": 6,\n      \"chapterTitle\": \"Lists in Python\",\n       \"chapterEmoji\": \"🧾\",\n      \"summary\": \"This chapter introduces Python lists, which are used to store collections of items. You'll learn about creating, modifying, and iterating through lists.\",\n      \"topics\": [\n          \"Creating lists\",\n          \"Accessing list elements\",\n          \"Modifying list elements\",\n          \"List methods (append(), insert(), remove(), pop(), len())\",\n          \"Iterating through lists with loops\"\n       ]\n    },\n     {\n      \"chapterNumber\": 7,\n      \"chapterTitle\": \"Introduction to Functions\",\n      \"chapterEmoji\": \"⚙️\",\n      \"summary\": \"This chapter introduces functions, their purpose, and syntax. Learn how to define and call basic functions to reuse code.\",\n       \"topics\": [\n        \"Defining a function using def\",\n         \"Calling a function\",\n         \"Function parameters and arguments\",\n         \"Returning a value\",\n         \"Basic scope concept(Local variable)\"\n      ]\n    }\n  ]\n}\n```\n**How to use this JSON:**\n\n1.  **Copy the JSON:** Copy the entire JSON block above.\n2.  **Parse with Python:** If you are using Python you can parse it like this:\n    ```python\n    import json\n\n    json_data = \"\"\"\n        {\n          \"courseTitle\": \"Python Fundamentals for Beginners\",\n          \"courseSummary\": \"This course provides a gentle introduction to the Python programming language. It covers basic syntax, data types, control flow, and simple functions, equipping you with the foundational knowledge to write basic Python programs.  It aims to build a solid understanding before moving onto more advanced topics.\",\n          \"levelOfDifficulty\": \"Easy\",\n          \"chapters\": [\n            {\n              \"chapterNumber\": 1,\n              \"chapterTitle\": \"Introduction to Python\",\n              \"chapterEmoji\": \"👋\",\n              \"summary\": \"This chapter introduces the Python language, its history, why it's popular, and how to set up your development environment. You will also write and run your first basic Python code.\",\n              \"topics\": [\n                \"What is Python?\",\n                \"Why Python?\",\n                \"Setting up Python Environment\",\n                \"Running your first Python program (Hello World)\",\n                  \"Basic Syntax (comments)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 2,\n              \"chapterTitle\": \"Data Types and Variables\",\n               \"chapterEmoji\": \"🧮\",\n              \"summary\": \"This chapter explains the core data types in Python (integers, floats, strings, and booleans) and how to declare and use variables to store them. It introduces the concept of operators\",\n              \"topics\": [\n                \"Integers (int)\",\n                \"Floating-point numbers (float)\",\n                \"Strings (str)\",\n                \"Booleans (bool)\",\n                \"Variables: Declaration and Assignment\",\n                \"Basic arithmetic operators (+, -, *, /, //, %, **)\",\n                   \"Comparison Operators (==, !=, >, <, >=, <=)\"\n\n              ]\n            },\n               {\n              \"chapterNumber\": 3,\n              \"chapterTitle\": \"Working with Strings\",\n               \"chapterEmoji\": \"💬\",\n              \"summary\": \"This chapter focuses on Strings in Python. It explores how to create, manipulate and format strings. Learn about common methods available for strings.\",\n              \"topics\": [\n                \"String creation\",\n                \"String Concatenation and Repetition\",\n                \"String Indexing and Slicing\",\n                 \"String length\",\n                \"Common string methods (lower(), upper(), strip(), replace(), find())\",\n                \"String formatting (f-strings)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 4,\n              \"chapterTitle\": \"Control Flow: Conditional Statements\",\n               \"chapterEmoji\": \"🚦\",\n              \"summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow your code to make decisions based on conditions. Learn to write programs that behave differently.\",\n              \"topics\": [\n                \"The `if` statement\",\n                \"The `if-else` statement\",\n                \"The `if-elif-else` statement\",\n                \"Nested `if` statements\",\n                \"Logical operators (`and`, `or`, `not`)\"\n              ]\n            },\n            {\n              \"chapterNumber\": 5,\n              \"chapterTitle\": \"Control Flow: Loops\",\n               \"chapterEmoji\": \"🔄\",\n              \"summary\": \"This chapter covers `for` and `while` loops, enabling you to repeat code blocks efficiently. Understand how to iterate through lists and perform repetitive tasks.\",\n              \"topics\": [\n                \"The `for` loop\",\n                 \"Iterating through lists\",\n                 \"The `while` loop\",\n                 \"Break and continue statements\"\n              ]\n            },\n            {\n              \"chapterNumber\": 6,\n              \"chapterTitle\": \"Lists in Python\",\n               \"chapterEmoji\": \"🧾\",\n              \"summary\": \"This chapter introduces Python lists, which are used to store collections of items. You'll learn about creating, modifying, and iterating through lists.\",\n              \"topics\": [\n                  \"Creating lists\",\n                  \"Accessing list elements\",\n                  \"Modifying list elements\",\n                  \"List methods (append(), insert(), remove(), pop(), len())\",\n                  \"Iterating through lists with loops\"\n               ]\n            },\n             {\n              \"chapterNumber\": 7,\n              \"chapterTitle\": \"Introduction to Functions\",\n              \"chapterEmoji\": \"⚙️\",\n              \"summary\": \"This chapter introduces functions, their purpose, and syntax. Learn how to define and call basic functions to reuse code.\",\n               \"topics\": [\n                \"Defining a function using def\",\n                 \"Calling a function\",\n                 \"Function parameters and arguments\",\n                 \"Returning a value\",\n                 \"Basic scope concept(Local variable)\"\n              ]\n            }\n          ]\n        }\n    \"\"\"\n    data = json.loads(json_data)\n    print(data['courseTitle'])\n    for chapter in data['chapters']:\n      print(f\"Chapter {chapter['chapterNumber']}: {chapter['chapterTitle']} {chapter['chapterEmoji']}\")\n      print(f\"  Summary: {chapter['summary']}\")\n      print(\"  Topics:\")\n      for topic in chapter['topics']:\n        print(f\"    - {topic}\")\n    ```\n\nThis will output a structured view of the course material.\n**Key Features for Easy Difficulty:**\n\n*   **Basic Concepts:** Focuses on the most fundamental concepts in Python.\n*   **Clear Explanations:** Summaries are written in a beginner-friendly style.\n*   **Sequential Learning:** Chapters are designed to build on previous ones.\n*   **Concrete Examples (Not included in JSON):** In real teaching, use simple, clear code examples to illustrate each concept.\n\nThis JSON data structure provides an organized and easily accessible way to create course material and can be further processed for display in various formats, such as a webpage, document, etc.\n"},
            ],
          },
        ],
    });
  
    //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    //console.log(result.response.text());
 
   export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate exam material detail content for each chapter and with code snippets for examples and Make sure to includes all topic print in the content, make sure to give content in HTML format with neet styles so user can easy to read and will happy the titles should be center (Do not Add HTMLK Head, Body, title tag), The chapters"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exam Material</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n            color: #333;\n            background-color: #f9f9f9;\n        }\n\n        h1,\n        h2 {\n            text-align: center;\n            color: #0056b3;\n            border-bottom: 2px solid #0056b3;\n            padding-bottom: 5px;\n            margin-bottom: 20px;\n\n        }\n        h2{\n            margin-top: 40px;\n        }\n        h3 {\n            color: #0056b3;\n            margin-bottom: 10px;\n        }\n\n        code {\n            background-color: #f0f0f0;\n            padding: 5px 10px;\n            border-radius: 5px;\n            display: block;\n            overflow-x: auto;\n            white-space: pre;\n            margin: 10px 0;\n        }\n         \n        .example{\n            padding: 20px;\n            border-radius: 8px;\n            background-color: white;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n            margin-bottom: 30px;\n        }\n        .example p{\n            margin-bottom: 10px;\n        }\n        \n    </style>\n</head>\n\n<body>\n\n    <h1>Chapter 1: Introduction to Programming</h1>\n\n   <div class=\"example\">\n        <h3>1.1 What is Programming?</h3>\n        <p>\n            Programming is the process of creating instructions for a computer to perform tasks. It involves writing code using a programming language.\n        </p>\n    </div>\n    <div class=\"example\">\n        <h3>1.2 Why Learn Programming?</h3>\n        <p>\n            Programming skills are valuable for problem-solving, automation, and creating software applications. It is a highly demanded skill in today's digital world.\n        </p>\n    </div>\n    <div class=\"example\">\n         <h3>1.3 Programming Languages</h3>\n        <p>\n            Programming languages are used to communicate with computers. Examples include Python, Java, C++, and JavaScript.\n        </p>\n    </div>\n     <div class=\"example\">\n        <h3>1.4 Basic Syntax</h3>\n        <p>\n            Each programming language has its own syntax rules for writing code. This includes keywords, operators, and punctuation.\n        </p>\n        <p><strong>Example (Python):</strong></p>\n        <code>\n            print(\"Hello, World!\")\n        </code>\n         <p><strong>Explanation:</strong> In this example, `print()` is a built-in function in python that display output in console, and the `\"Hello, World!\"` is a string literal which is the message to be displayed. </p>\n\n    </div>\n   \n    \n    \n    \n    <h2>Chapter 2: Variables and Data Types</h2>\n\n    \n    <div class=\"example\">\n         <h3>2.1 What are Variables?</h3>\n         <p>Variables are used to store data in a program. They have a name and a value.</p>\n\n         <p><strong>Example (Python):</strong></p>\n        <code>\n            age = 25 <br>\n            name = \"Alice\"\n        </code>\n        <p><strong>Explanation:</strong> In this example `age` and `name` are variables. The value `25` is assigned to variable `age` and the string `\"Alice\"` is assigned to variable `name`.</p>\n\n    </div>\n    \n     <div class=\"example\">\n         <h3>2.2 Data Types</h3>\n        <p>Different types of data are stored differently by a program. Common data types include integers, floats, strings, and booleans.</p>\n            <p><strong>Integer:</strong> Represents whole numbers. For example, 10, -5, 0.</p>\n            <p><strong>Float:</strong> Represents numbers with decimal points. For example, 3.14, -2.5.</p>\n             <p><strong>String:</strong> Represents text. For example, \"hello\", \"world\".</p>\n             <p><strong>Boolean:</strong> Represents truth values, true or false.</p>\n        <p><strong>Example (Python):</strong></p>\n        <code>\n            age = 30 # Integer <br>\n            height = 5.9 # Float<br>\n            message = \"Hello\" # String<br>\n            is_active = True # Boolean\n        </code>\n     <p><strong>Explanation:</strong> In this example different types of variables are defined with respective type values and this example shows different data types like integer, float, string and boolean.</p>\n   \n    </div>\n    <div class=\"example\">\n       <h3>2.3 Variable Declaration</h3>\n       <p>\n           In some languages, variables need to be declared with their type before they are used. In languages like Python, the type is automatically determined.\n       </p>\n        \n    </div>\n   \n\n    <h2>Chapter 3: Operators</h2>\n        \n        <div class=\"example\">\n         <h3>3.1 Arithmetic Operators</h3>\n        <p>\n           These include operators for addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and exponentiation (**).\n       </p>\n       \n          <p><strong>Example (Python):</strong></p>\n            <code>\n                x = 10<br>\n                y = 3<br>\n                sum = x + y<br>\n                difference = x - y<br>\n                product = x * y<br>\n                quotient = x / y<br>\n                remainder = x % y<br>\n                power = x ** y\n            </code>\n              <p><strong>Explanation:</strong> In this example different arithmetic operations are performed on the variables. `x + y` gives addition, `x - y` gives subtraction, `x * y` gives multiplication, `x / y` gives division, `x % y` gives reminder, `x ** y` gives power of x to y.</p>\n\n    </div>\n\n   \n       <div class=\"example\">\n          <h3>3.2 Assignment Operators</h3>\n        <p>\n            Assignment operators are used to assign values to variables. The most common is the equals sign (=), but there are also combined assignment operators like +=, -=, *=, /=.\n        </p>\n           <p><strong>Example (Python):</strong></p>\n            <code>\n               z = 5<br>\n                z += 2 # z is now 7\n            </code>\n                <p><strong>Explanation:</strong> In this example first we have assigned value of 5 to variable `z` and in the second line we have incremented the existing value of `z` by 2 using `+=` operator</p>\n\n    </div>\n\n  \n     <div class=\"example\">\n         <h3>3.3 Comparison Operators</h3>\n       <p>\n           Comparison operators are used to compare two values. They include equal to (==), not equal to (!=), greater than (>), less than (<), greater than or equal to (>=), and less than or equal to (<=).\n       </p>\n        <p><strong>Example (Python):</strong></p>\n            <code>\n                a = 10<br>\n                b = 20<br>\n                print(a == b) # Output: False<br>\n                print(a != b) # Output: True\n            </code>\n                 <p><strong>Explanation:</strong> In this example we have two variables a and b with values 10 and 20 respectively, we have used `==` (is equal to) operator and the output will be `False` because a is not equal to b and then we have used `!=`(is not equal to) operator and the output will be `True` because a is not equal to b.</p>\n\n    </div>\n\n      <div class=\"example\">\n          <h3>3.4 Logical Operators</h3>\n       <p>\n           Logical operators are used to combine or modify boolean expressions. These include and (and), or (or), and not (not).\n       </p>\n             <p><strong>Example (Python):</strong></p>\n            <code>\n                p = True<br>\n                q = False<br>\n                print(p and q) # Output: False<br>\n                 print(p or q)  # Output: True<br>\n                print(not p)    # Output: False\n            </code>\n             <p><strong>Explanation:</strong> In this example we have two boolean variables p and q, first we have used `and` operator, if both variables are `True` then only output will be `True` otherwise it will be `False`. Then we have used `or` operator which will return `True` if one of the variables is `True`, and `not` operator simply reverse the value of the boolean expression.</p>\n\n    </div>\n\n   \n     <h2>Chapter 4: Control Flow</h2>\n\n   \n      <div class=\"example\">\n       <h3>4.1 Conditional Statements (if, else, elif)</h3>\n        <p>\n            Conditional statements allow the execution of code based on whether a condition is true or false. `if` is used for the main condition, `elif` for alternative conditions, and `else` for default execution when no condition is met.\n        </p>\n            <p><strong>Example (Python):</strong></p>\n            <code>\n                score = 75 <br>\n                if score >= 90:<br>\n                    print(\"A\")<br>\n                elif score >= 80:<br>\n                   print(\"B\")<br>\n                elif score >= 70:<br>\n                    print(\"C\")<br>\n                else:<br>\n                   print(\"D\")\n            </code>\n       <p><strong>Explanation:</strong> In this example based on the score, different grades will be printed, if `score` is greater than or equal to 90 then `A` will be printed, if score is greater than or equal to 80 then `B` will be printed, if score is greater than or equal to 70 then `C` will be printed, otherwise `D` will be printed.</p>\n\n    </div>\n        \n   \n     <div class=\"example\">\n        <h3>4.2 Loops (for, while)</h3>\n         <p>\n             Loops are used to repeat a block of code multiple times. The `for` loop is used to iterate over a sequence, and the `while` loop repeats as long as a condition is true.\n         </p>\n            <p><strong>Example (Python):</strong></p>\n            <code>\n             #for loop <br>\n            for i in range(5): <br>\n                 print(i) <br>\n             #while loop <br>\n            count = 0 <br>\n            while count < 5: <br>\n               print(count) <br>\n                count += 1\n            </code>\n           <p><strong>Explanation:</strong> In this example, in the for loop, the `range(5)` function generates a sequence of numbers from 0 to 4, and the loop iterates through these numbers, printing each one. In the while loop, a `count` variable is initialized to 0, and the loop continues as long as `count` is less than 5, printing the current value of `count` and incrementing `count` by 1 in each iteration.</p>\n        \n    </div>\n\n    \n   \n    <h2>Chapter 5: Functions</h2>\n\n    \n      <div class=\"example\">\n         <h3>5.1 What are Functions?</h3>\n          <p>\n            Functions are reusable blocks of code that perform a specific task. They help to organize and modularize code.\n        </p>\n        \n    </div>\n   <div class=\"example\">\n        <h3>5.2 Defining Functions</h3>\n        <p>\n             Functions are defined using the def keyword, followed by the function name, parameters, and the function body.\n        </p>\n          <p><strong>Example (Python):</strong></p>\n            <code>\n                def greet(name): <br>\n                   print(\"Hello, \" + name + \"!\") <br>\n                greet(\"Bob\") # Function Call\n            </code>\n              <p><strong>Explanation:</strong> In this example, a function called `greet` is defined, taking one argument `name`. Inside the function, a greeting message is printed using string concatenation with the `name` variable. When `greet(\"Bob\")` is called, the function executes, printing \"Hello, Bob!\".</p>\n\n    </div>\n\n   \n        <div class=\"example\">\n             <h3>5.3 Function Arguments and Parameters</h3>\n        <p>\n           Functions can accept arguments when called, and these are received as parameters within the function body.\n       </p>\n        <p><strong>Example (Python):</strong></p>\n            <code>\n                def add(x, y): <br>\n                   return x + y<br>\n                result = add(5, 3) <br>\n                 print(result)\n            </code>\n                  <p><strong>Explanation:</strong> In this example, `add` function take two parameters `x` and `y` and returns the result of `x + y` and when we call the function with arguments `5` and `3` then it returns `8`.  </p>\n\n    </div>\n\n  \n      <div class=\"example\">\n        <h3>5.4 Return Values</h3>\n        <p>\n           Functions can return a value using the return keyword. This allows functions to produce results that can be used elsewhere in the code.\n       </p>\n        \n    </div>\n   \n</body>\n\n</html>\n```\n"},
          ],
        },
      ],
    });


    export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the flashcard on topic : Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the basic building block of a Flutter UI. Everything in Flutter is a widget, from buttons and text to layouts and entire screens.\"\n  },\n  {\n      \"front\": \"What's the difference between StatelessWidget and StatefulWidget?\",\n      \"back\": \"StatelessWidgets don't change over time; their UI is immutable. StatefulWidgets maintain a state that can change, leading to UI updates.\"\n   },\n   {\n    \"front\": \"Name 3 common layout widgets in Flutter.\",\n    \"back\": \"Container, Row, Column.\"\n  },\n  {\n    \"front\": \"What does 'BuildContext' represent?\",\n     \"back\": \"BuildContext is a handle to the location of a widget in the widget tree. It's needed for certain actions like navigation and accessing theme data.\"\n  },\n {\n   \"front\": \"What is the purpose of 'MaterialApp' widget?\",\n    \"back\":\"MaterialApp is a fundamental widget that configures the root of your Flutter app. It sets up the Material Design theme, navigation, and more.\"\n },\n {\n    \"front\": \"What does the 'Scaffold' widget do?\",\n    \"back\": \"The 'Scaffold' widget implements the basic visual layout structure for a Material Design app, including the app bar, body, and bottom navigation bar.\"\n  },\n  {\n    \"front\": \"How do you add padding around a widget?\",\n    \"back\": \"Use the 'Padding' widget, wrapping your desired widget and specifying the padding values.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Use `Navigator.push(context, MaterialPageRoute(builder: (context) => YourNewScreen()));`\"\n  },\n    {\n    \"front\": \"What is 'Navigator.pushReplacement' used for?\",\n    \"back\": \"It replaces the current screen on the navigation stack with the new screen, preventing the user from returning to the previous one with the back button.\"\n  },\n  {\n    \"front\": \"How to pass data to a new screen during navigation?\",\n    \"back\": \"Pass data as an argument to the constructor of the new screen class and access it in the build method of the new screen. You can also use named routes to pass data.\"\n   },\n {\n    \"front\": \"What is a 'Route' in Flutter?\",\n    \"back\":\"A Route represents a screen or a part of the app that is part of the navigation flow.\"\n },\n{\n    \"front\":\"What are named routes?\",\n     \"back\":\"Named routes allow you to define your routes with names which is more readable and easy to manage rather than using anonymous routes.\"\n  },\n    {\n    \"front\": \"How do you use 'Center' widget?\",\n    \"back\": \"The 'Center' widget centers its child widget both horizontally and vertically within its parent container.\"\n  },\n  {\n    \"front\": \"What is 'main.dart' in Flutter?\",\n    \"back\": \"'main.dart' is the entry point of your Flutter application. It usually contains the 'main()' function that runs your application\"\n  },\n  {\n   \"front\":\"What is 'pubspec.yaml' file in Flutter?\",\n   \"back\": \"The 'pubspec.yaml' file is a configuration file used to manage a Flutter project's dependencies, assets, and other project settings.\"\n  }\n]\n```\n"},
          ],
        },
      ],
    });
  

    export const GenerateQuizAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Quiz on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation with question and options along with correct answer in json format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI Development, and Basic App Navigation\",\n  \"questions\": [\n    {\n      \"questionText\": \"What is Flutter primarily used for?\",\n      \"options\": [\n        \"Web Development\",\n        \"Native Android Development\",\n        \"Cross-Platform Mobile Development\",\n        \"Backend Development\"\n      ],\n      \"correctAnswer\": \"Cross-Platform Mobile Development\"\n    },\n    {\n      \"questionText\": \"Which programming language is used to write Flutter code?\",\n      \"options\": [\n        \"Java\",\n        \"Swift\",\n        \"Kotlin\",\n        \"Dart\"\n      ],\n      \"correctAnswer\": \"Dart\"\n    },\n    {\n      \"questionText\": \"What is a 'widget' in Flutter?\",\n      \"options\": [\n        \"A database table\",\n        \"A reusable UI component\",\n        \"A network request\",\n        \"A background process\"\n      ],\n      \"correctAnswer\": \"A reusable UI component\"\n    },\n      {\n      \"questionText\": \"Which widget is used to create a basic structure for your Flutter UI, such as a main container?\",\n      \"options\": [\n        \"Text\",\n        \"Image\",\n          \"Container\",\n        \"Button\"\n      ],\n      \"correctAnswer\": \"Container\"\n    },\n      {\n      \"questionText\": \"Which layout widget allows you to arrange child widgets in a horizontal row?\",\n       \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Stack\",\n         \"ListView\"\n       ],\n        \"correctAnswer\": \"Row\"\n      },\n       {\n        \"questionText\": \"What is the purpose of the `setState()` method in Flutter?\",\n        \"options\": [\n         \"To create a new widget\",\n          \"To trigger a rebuild of the UI with updated data\",\n         \"To perform network requests\",\n         \"To store data permanently\"\n        ],\n        \"correctAnswer\": \"To trigger a rebuild of the UI with updated data\"\n      },\n    {\n      \"questionText\": \"Which widget would you use to display a list of scrollable items?\",\n      \"options\": [\n        \"Card\",\n        \"Text\",\n        \"ListView\",\n        \"Image\"\n      ],\n       \"correctAnswer\": \"ListView\"\n    },\n    {\n      \"questionText\": \"What is the purpose of a 'Navigator' in Flutter?\",\n      \"options\": [\n        \"To manage database connections\",\n        \"To handle animations\",\n         \"To manage navigation between screens\",\n        \"To perform calculations\"\n      ],\n      \"correctAnswer\": \"To manage navigation between screens\"\n    },\n    {\n      \"questionText\": \"Which method is used to navigate to a new screen using the Navigator?\",\n      \"options\": [\n        \"push()\",\n        \"pop()\",\n        \"open()\",\n        \"start()\"\n      ],\n        \"correctAnswer\": \"push()\"\n    },\n   {\n      \"questionText\": \"What does `Navigator.pop(context)` typically do?\",\n      \"options\": [\n        \"Navigates to the next screen\",\n        \"Closes the current screen and returns to the previous screen\",\n        \"Reloads the current screen\",\n         \"Creates a new Navigator\"\n      ],\n     \"correctAnswer\": \"Closes the current screen and returns to the previous screen\"\n    }\n   ,\n    {\n      \"questionText\": \"Which widget is used to add padding around another widget?\",\n      \"options\": [\n        \"Align\",\n        \"Expanded\",\n        \"Padding\",\n        \"Center\"\n      ],\n      \"correctAnswer\": \"Padding\"\n    }\n  ]\n}\n```\n"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "maximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI Development, and Basic App Navigation\",\n  \"questions\": [\n    {\n      \"questionText\": \"What is Flutter primarily used for?\",\n      \"options\": [\n        \"Web Development\",\n        \"Native Android Development\",\n        \"Cross-Platform Mobile Development\",\n        \"Backend Development\"\n      ],\n      \"correctAnswer\": \"Cross-Platform Mobile Development\"\n    },\n    {\n      \"questionText\": \"Which programming language is used to write Flutter code?\",\n      \"options\": [\n        \"Java\",\n        \"Swift\",\n        \"Kotlin\",\n        \"Dart\"\n      ],\n      \"correctAnswer\": \"Dart\"\n    },\n    {\n      \"questionText\": \"What is a 'widget' in Flutter?\",\n      \"options\": [\n        \"A database table\",\n        \"A reusable UI component\",\n        \"A network request\",\n        \"A background process\"\n      ],\n      \"correctAnswer\": \"A reusable UI component\"\n    },\n      {\n      \"questionText\": \"Which widget is used to create a basic structure for your Flutter UI, such as a main container?\",\n      \"options\": [\n        \"Text\",\n        \"Image\",\n          \"Container\",\n        \"Button\"\n      ],\n      \"correctAnswer\": \"Container\"\n    },\n      {\n      \"questionText\": \"Which layout widget allows you to arrange child widgets in a horizontal row?\",\n       \"options\": [\n        \"Column\",\n        \"Row\",\n        \"Stack\",\n         \"ListView\"\n       ],\n        \"correctAnswer\": \"Row\"\n      },\n       {\n        \"questionText\": \"What is the purpose of the `setState()` method in Flutter?\",\n        \"options\": [\n         \"To create a new widget\",\n          \"To trigger a rebuild of the UI with updated data\",\n         \"To perform network requests\",\n         \"To store data permanently\"\n        ],\n        \"correctAnswer\": \"To trigger a rebuild of the UI with updated data\"\n      },\n    {\n      \"questionText\": \"Which widget would you use to display a list of scrollable items?\",\n      \"options\": [\n        \"Card\",\n        \"Text\",\n        \"ListView\",\n        \"Image\"\n      ],\n       \"correctAnswer\": \"ListView\"\n    },\n    {\n      \"questionText\": \"What is the purpose of a 'Navigator' in Flutter?\",\n      \"options\": [\n        \"To manage database connections\",\n        \"To handle animations\",\n         \"To manage navigation between screens\",\n        \"To perform calculations\"\n      ],\n      \"correctAnswer\": \"To manage navigation between screens\"\n    },\n    {\n      \"questionText\": \"Which method is used to navigate to a new screen using the Navigator?\",\n      \"options\": [\n        \"push()\",\n        \"pop()\",\n        \"open()\",\n        \"start()\"\n      ],\n        \"correctAnswer\": \"push()\"\n    },\n   {\n      \"questionText\": \"What does `Navigator.pop(context)` typically do?\",\n      \"options\": [\n        \"Navigates to the next screen\",\n        \"Closes the current screen and returns to the previous screen\",\n        \"Reloads the current screen\",\n         \"Creates a new Navigator\"\n      ],\n     \"correctAnswer\": \"Closes the current screen and returns to the previous screen\"\n    },\n     {\n        \"questionText\": \"Which widget is commonly used to create buttons in Flutter?\",\n        \"options\": [\n          \"TextField\",\n          \"ElevatedButton\",\n          \"Text\",\n          \"Image\"\n        ],\n        \"correctAnswer\": \"ElevatedButton\"\n      },\n     {\n        \"questionText\": \"Which widget is best for displaying a single line of text?\",\n        \"options\":[\n          \"Container\",\n           \"Text\",\n           \"Column\",\n           \"Row\"\n        ],\n        \"correctAnswer\": \"Text\"\n      },\n     {\n        \"questionText\": \"What is the main purpose of the `build()` method in a Flutter widget?\",\n         \"options\": [\n          \"To load data from the internet\",\n          \"To define the widget's UI\",\n           \"To handle user input\",\n           \"To save data to a file\"\n         ],\n          \"correctAnswer\":\"To define the widget's UI\"\n     },\n     {\n        \"questionText\": \"What is the purpose of the `pubspec.yaml` file in a Flutter project?\",\n        \"options\": [\n          \"To define the project's UI layout\",\n          \"To manage the project's dependencies and assets\",\n          \"To store user settings\",\n          \"To write Dart code\"\n       ],\n       \"correctAnswer\": \"To manage the project's dependencies and assets\"\n      },\n       {\n        \"questionText\":\"Which widget do you use to center a child widget within its parent?\",\n          \"options\": [\n            \"Padding\",\n            \"Align\",\n            \"Center\",\n            \"Row\"\n            ],\n           \"correctAnswer\":\"Center\"\n       }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });


 export  const GenerateQAAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Question And Answers on topic : Flutter\nFundamentals,Use Interface (UI)\nDevelopment,Basic App Navigation in\nJSON format with front back content,\nMaximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"question\": \"What is Flutter?\",\n    \"answer\": \"Flutter is an open-source UI software development kit created by Google. It is used to develop cross-platform applications for Android, iOS, Linux, macOS, Windows, and the web from a single codebase.\",\n      \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is Flutter?\"\n  },\n  {\n    \"question\": \"What language is Flutter primarily written in?\",\n    \"answer\": \"Flutter is primarily written in the Dart programming language.\",\n     \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What language is Flutter primarily written in?\"\n  },\n  {\n    \"question\": \"What is a 'Widget' in Flutter?\",\n    \"answer\": \"In Flutter, everything is a widget. A widget is a structural component that represents an element in the user interface, like a button, text field, or image.\",\n    \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is a 'Widget' in Flutter?\"\n  },\n  {\n    \"question\": \"What is the difference between 'StatelessWidget' and 'StatefulWidget'?\",\n    \"answer\": \"A 'StatelessWidget' is immutable and does not change once created. A 'StatefulWidget' can change over time due to user interaction or data updates.\",\n     \"front\": \"Flutter Fundamentals\",\n      \"back\": \"What is the difference between 'StatelessWidget' and 'StatefulWidget'?\"\n  },\n    {\n    \"question\": \"Name three commonly used layout widgets in Flutter.\",\n    \"answer\": \"Three commonly used layout widgets are: Container, Row, Column.\",\n      \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"Name three commonly used layout widgets in Flutter.\"\n  },\n  {\n      \"question\": \"What is the purpose of the `build()` method in a Flutter widget?\",\n      \"answer\": \"The `build()` method describes how a widget should be rendered in the UI. It returns a widget tree that Flutter uses to display the UI.\",\n      \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"What is the purpose of the `build()` method in a Flutter widget?\"\n  },\n  {\n    \"question\":\"How do you handle user input in Flutter?\",\n    \"answer\":\"User input can be handled using widgets like `TextField`, `ElevatedButton` along with callback functions like `onChanged`, `onPressed`.\",\n     \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"How do you handle user input in Flutter?\"\n  },\n   {\n    \"question\": \"What is the purpose of the `setState()` method in a StatefulWidget?\",\n    \"answer\": \"The `setState()` method informs Flutter that the state of a `StatefulWidget` has changed, causing the UI to be rebuilt to reflect those changes.\",\n     \"front\": \"Use Interface (UI) Development\",\n      \"back\": \"What is the purpose of the `setState()` method in a StatefulWidget?\"\n  },\n {\n    \"question\": \"What is the main purpose of using `Navigator` in Flutter?\",\n    \"answer\": \"The `Navigator` widget is used for managing app navigation, such as pushing new screens onto the stack and popping back to previous ones.\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"What is the main purpose of using `Navigator` in Flutter?\"\n  },\n  {\n    \"question\": \"What are the two primary ways to navigate in Flutter using the Navigator?\",\n    \"answer\": \"The two primary ways are: `Navigator.push` for moving to a new screen and `Navigator.pop` for returning to the previous one.\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"What are the two primary ways to navigate in Flutter using the Navigator?\"\n  },\n    {\n      \"question\": \"What is a 'Route' in Flutter navigation?\",\n      \"answer\":\"A Route in Flutter navigation is an abstraction for a screen or page. It encapsulates the destination (Widget) and transition.\",\n      \"front\": \"Basic App Navigation\",\n       \"back\": \"What is a 'Route' in Flutter navigation?\"\n    },\n  {\n    \"question\": \"How do you pass data when navigating to a new screen?\",\n    \"answer\": \"Data can be passed when navigating using arguments in `Navigator.push` (e.g., as part of a named route or using a constructor).\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"How do you pass data when navigating to a new screen?\"\n  },\n  {\n    \"question\": \"What are named routes and how are they useful?\",\n    \"answer\": \"Named routes associate string names with routes. This allows you to navigate between pages by name which makes code more maintainable and easier to read.\",\n    \"front\": \"Basic App Navigation\",\n    \"back\": \"What are named routes and how are they useful?\"\n  },\n {\n      \"question\":\"What is the difference between `push` and `pushReplacementNamed`?\",\n      \"answer\":\"`push` adds a new page on top of current one, while `pushReplacementNamed` replaces current page with new one.\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"What is the difference between `push` and `pushReplacementNamed`?\"\n  },\n{\n \"question\": \"How to implement basic navigation with MaterialPageRoute?\",\n \"answer\":\"`MaterialPageRoute` is used with `Navigator.push` and `Navigator.pushNamed` to provide material design transitions between screens. Example: `Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()));`\",\n     \"front\": \"Basic App Navigation\",\n    \"back\": \"How to implement basic navigation with MaterialPageRoute?\"\n}\n]\n```\n"},
          ],
        },
      ],
    });
  
  